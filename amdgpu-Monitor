#!/usr/bin/env python3
"""amdgpu-Monitor  -  Displays current status of all active GPUs

    A utility to give the current state of all compatible GPUs.  The default behavior
    is to just output relevant parameters. With the *--loop* option, a table of relevant
    paramters will be continuously updated.  Use Ctrl-c to exit the loop.

    Copyright (C) 2019  RueiKe

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.
"""
__author__ = "RueiKe"
__copyright__ = "Copyright (C) 2019 RueiKe"
__credits__ = ""
__license__ = "GNU General Public License"
__program_name__ = "benchMT"
__version__ = "v0.3.0"
__maintainer__ = "RueiKe"
__status__ = "Development"

import gi
gi.require_version("Gtk", "3.0")
from gi.repository import GLib, Gtk
import argparse
import re
import subprocess
import threading
#import socket
import os
import platform
import sys
import time
from GPUmodules import GPUmodules as GPU
from datetime import datetime
from uuid import uuid4
import glob 
import shutil 

# Instantiate project constants
gut_const = GPU.GUT_CONST()

class MonitorWindow(Gtk.Window):
    def __init__(self, gpu_list):
        Gtk.Window.__init__(self, title="GPU Monitor")
        self.set_border_width(10)

def updateData(gpu_list, devices):
    gpu_list.read_hw_data()
    gpu_list.read_device_data()
    for dk, dv in devices.items():
        for lk, lv in dv.items():
            lv.set_text(str(gpu_list.list[dk].get_value(lk)))

def refresh(refreshtime, updateData, gpu_list, devices):
    while True:
        GLib.idle_add(updateData, gpu_list, devices)
        time.sleep(refreshtime)


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("--about", help="README", action="store_true", default=False)
    parser.add_argument("--loop", help="Looped output in table", action="store_true", default=False)
    parser.add_argument("--gui", help="Display GTK Version of Monitor", action="store_true", default=False)
    parser.add_argument("-d", "--debug", help="Debug output", action="store_true", default=False)
    args = parser.parse_args()

    if args.debug == True :  gut_const.DEBUG = True

    # About me
    if args.about == True :  
        print(__doc__ )
        print("Author: ", __author__ )
        print("Copyright: ", __copyright__)
        print("Credits: ", __credits__)
        print("License: ", __license__)
        print("Version: ", __version__)
        print("Maintainer: ", __maintainer__)
        print("Status: ", __status__)
        sys.exit(0)

    # Check python version
    (python_major, python_minor, python_patch) = platform.python_version_tuple()
    if python_major < "3":
        print("Using python" + python_major + ", but benchMT requires python3. Exiting...")
        sys.exit(0)
    if python_minor < "6":
        print("Using python " + python_major +"."+ python_minor +"."+ python_patch +
                " but, benchMT requires python 3.6 and up. Exiting...")
        sys.exit(0)

    # Check Linux Kernel version
    linux_version = platform.release()
    if int(linux_version.split(".")[0]) < 4:
        print(f"Using Linux Kernel {linux} but benchMT requires > 4.17. Exiting...")
        sys.exit(0)
    if int(linux_version.split(".")[1]) < 8:
        print(f"Using Linux Kernel {linux} but benchMT requires > 4.17. Exiting...")
        sys.exit(0)

    # Check value of AMD Feature mask
    try:
        featuremask = gut_const.read_amdfeaturemask()
    except FileNotFoundError:
        print("Cannot read ppfeaturemask. Exiting...")
        sys.exit(-1)
    if featuremask == int(0xffff7fff) or featuremask == int(0xffffffff) :
        print("AMD Wattman features enabled: %s" % hex(featuremask))
        print("")
    else:
        print("AMD Wattman features not enabled: %s, See README file." % hex(featuremask))
        sys.exit(-1)

    gpu_list = GPU.GPU_LIST()
    gpu_list.get_gpu_list()
    gpu_list.read_hw_data()
    gpu_list.read_device_data()
    gpu_list.get_gpu_details()

    if args.loop == False and args.gui == False:
        gpu_list.print()
        sys.exit(0)

    if args.gui == True:
        # Display Gtk style Monitor
        gmonitor = MonitorWindow(gpu_list)
        grid = Gtk.Grid()
        gmonitor.add(grid)

        col = 0
        row_labels = {"card_num": Gtk.Label(label="")}
        for k, v in gpu_list.table_param_labels.items():
            row_labels[k] = Gtk.Label(label=str(v))
        i=0
        for k, v in row_labels.items():
            grid.attach(v, col, i, 1, 1)
            i += 1

        devices = {}
        for k, v in gpu_list.list.items():
            devices[v.uuid] = {"card_num":  Gtk.Label(label="card"+v.get_value("card_num"))}
            for cv in gpu_list.table_param_labels:
                devices[v.uuid][cv] = Gtk.Label(label=v.get_value(str(cv)))
        for dk, dv in devices.items():
            col += 1
            i = 0
            for lk, lv in dv.items():
                grid.attach(lv, col, i, 1, 1)
                i += 1

        gmonitor.connect("delete-event", Gtk.main_quit)
        gmonitor.show_all()

        # Start thread to update Monitor
        monthread = threading.Thread(target=refresh, daemon=True, args=[2, updateData, gpu_list, devices]).start()

        Gtk.main()

    else:
        # Display text style Monitor
        try:
            while True:
                gpu_list.read_hw_data()
                gpu_list.read_device_data()
                if gut_const.DEBUG == False: os.system('clear')
                gpu_list.print_table()
                time.sleep(2)
        except KeyboardInterrupt:
            sys.exit(0)


if __name__ == "__main__":
    main()
