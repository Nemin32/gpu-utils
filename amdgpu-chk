#!/usr/bin/env python3
"""amdgpu-chk  -  Checks OS/Python compatibility

    Copyright (C) 2019  RueiKe

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.
"""
__author__ = "RueiKe"
__copyright__ = "Copyright (C) 2019 RueiKe"
__credits__ = ["Craig Echt - Testing, Debug, and Verification"]
__license__ = "GNU General Public License"
__program_name__ = "amdgpu-chk"
__version__ = "v2.3.0"
__maintainer__ = "RueiKe"
__status__ = "Stable Release"

import argparse
import re
import subprocess
import os
import platform
import sys
import time
#from GPUmodules import env
from datetime import datetime
from uuid import uuid4
import glob 
import shutil 
from pathlib import Path

class GUT_CONST:
    def __init__(self):
        self.featuremask = "/sys/module/amdgpu/parameters/ppfeaturemask"
        self.card_root = "/sys/class/drm/"
        self.hwmon_sub = "hwmon/hwmon"
        self.execute_pac = False
        self.DEBUG = False
        self.LOG = False
        self.log_file_ptr = ""
        self.show_fans = True
        self.write_delta_only = False
        self.SLEEP = 2
        self.PATH = "."
        self.amdfeaturemask = ""

    def read_amdfeaturemask(self):
        with open(gut_const.featuremask) as fm_file:
            self.amdfeaturemask = int(fm_file.readline())
            return (self.amdfeaturemask)

    def check_env(self):
        ret_val = 0
        # Check python version
        (python_major, python_minor, python_patch) = platform.python_version_tuple()
        print("Using python " + python_major +"."+ python_minor +"."+ python_patch, end="", file=sys.stderr )
        if self.DEBUG: print("Using python " + python_major +"."+ python_minor +"."+ python_patch)
        if python_major < "3":
            print(", " +'\x1b[1;37;41m' + "but amdgpu-utils requires python3." + '\x1b[0m', file=sys.stderr)
            #return(-1)
            ret_val = -1
        elif python_minor < "6":
            print(", " +'\x1b[1;37;41m' + "but amdgpu-utils requires python 3.6 or newer." + '\x1b[0m', file=sys.stderr)
            #return(-1)
            ret_val = -1
        else:
            print(", Python version OK.", file=sys.stderr)
            ret_val = 0

        # Check Linux Kernel version
        linux_version = platform.release()
        print("Using Linux Kernel", linux_version, end="", file=sys.stderr)
        if int(linux_version.split(".")[0]) < 4:
            print(", " +'\x1b[1;37;41m' + "but amdgpu-util requires > 4.17." + '\x1b[0m', file=sys.stderr)
            #return(-2)
            ret_val = -2
        elif int(linux_version.split(".")[1]) < 8:
            print(", " +'\x1b[1;37;41m' + "but benchMT requires > 4.17." + '\x1b[0m', file=sys.stderr)
            #return(-2)
            ret_val = -2
        else:
            print(", OS kernel OK.", file=sys.stderr)
            ret_val = 0

        return(ret_val)

gut_const = GUT_CONST()

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("--about", help="README", action="store_true", default=False)
    parser.add_argument("-d", "--debug", help="Debug output", action="store_true", default=False)
    args = parser.parse_args()


    # About me
    if args.about == True :  
        print(__doc__ )
        print("Author: ", __author__ )
        print("Copyright: ", __copyright__)
        print("Credits: ", __credits__)
        print("License: ", __license__)
        print("Version: ", __version__)
        print("Maintainer: ", __maintainer__)
        print("Status: ", __status__)
        sys.exit(0)

    gut_const.PATH = os.path.dirname(str(Path(__file__).resolve()))
    gut_const.DEBUG = args.debug

    if gut_const.check_env() < 0:
        print("Error in environment. Exiting...")
        sys.exit(-1)

if __name__ == "__main__":
    main()
