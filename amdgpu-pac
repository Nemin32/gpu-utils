#!/usr/bin/env python3
"""amdgpu-pac  -  A utility program and control compatible AMD GPUs

    A utility to modify the settings, including p-states and power-performance modes, of
    compatible AMD GPUs.

    Copyright (C) 2019  RueiKe

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.
"""
__author__ = "RueiKe"
__copyright__ = "Copyright (C) 2019 RueiKe"
__credits__ = ""
__license__ = "GNU General Public License"
__program_name__ = "amdgpu-pac"
__version__ = "v2.0.0"
__maintainer__ = "RueiKe"
__status__ = "Development"

import gi
gi.require_version("Gtk", "3.0")
from gi.repository import GLib, Gtk, Gdk
import argparse
import re
import subprocess
import threading
import os
import platform
import sys
import time
from GPUmodules import GPUmodules as GPU
from datetime import datetime
from uuid import uuid4
import glob 
import shutil 
from pathlib import Path

# Instantiate project constants
gut_const = GPU.GUT_CONST()

class MonitorWindow(Gtk.Window):
    def __init__(self, gpu_list):
        Gtk.Window.__init__(self, title="GPU OC")
        self.set_border_width(1)
        if(os.path.isfile(gut_const.PATH + '/amdgpu-oc.icon.jpg') == True):
            self.set_icon_from_file(gut_const.PATH + '/amdgpu-oc.icon.jpg')

def save_card(self, device):
    for dk, dv in device.items():
        print(dk)
        print(dv)
    pass

def reset_card(self, device):
    pass


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("--about", help="README", action="store_true", default=False)
    #parser.add_argument("--gui", help="Display GTK Version of Monitor", action="store_true", default=False)
    parser.add_argument("-d", "--debug", help="Debug output", action="store_true", default=False)
    args = parser.parse_args()


    # About me
    if args.about == True :  
        print(__doc__ )
        print("Author: ", __author__ )
        print("Copyright: ", __copyright__)
        print("Credits: ", __credits__)
        print("License: ", __license__)
        print("Version: ", __version__)
        print("Maintainer: ", __maintainer__)
        print("Status: ", __status__)
        sys.exit(0)

    gut_const.PATH = os.path.dirname(str(Path(__file__).resolve()))
    if args.debug == True :  gut_const.DEBUG = True

    if gut_const.check_env() < 0:
        print("Error in environment. Exiting...")
        sys.exit(-1)

    # Check value of AMD Feature mask
    try:
        featuremask = gut_const.read_amdfeaturemask()
    except FileNotFoundError:
        print("Cannot read ppfeaturemask. Exiting...")
        sys.exit(-1)
    if featuremask == int(0xffff7fff) or featuremask == int(0xffffffff) :
        print("AMD Wattman features enabled: %s" % hex(featuremask))
    else:
        print("AMD Wattman features not enabled: %s, See README file." % hex(featuremask))
        sys.exit(-1)

    gut_const.get_amd_driver_version()

    gpu_list = GPU.GPU_LIST()
    gpu_list.get_gpu_list()
    num_amd_gpus = gpu_list.num_gpus()

    if num_amd_gpus == 0:
        print("No AMD GPUs detected, exiting...")
        sys.exit(-1)
    else:
        print(f"{num_amd_gpus} AMD GPUs detected")
    gpu_list.read_hw_data()
    gpu_list.read_device_data()
    gpu_list.get_gpu_details()
    gpu_list.get_pstates()
    gpu_list.get_ppm_table()


    num_com_amd_gpus = gpu_list.num_compatible_gpus()
    if num_com_amd_gpus == 0:
        print("None are compatible, exiting...")
        #sys.exit(-1)
    else:
        print(f"{num_amd_gpus} are compatible")
        print("")

    # Display Gtk style Monitor
    gmonitor = MonitorWindow(gpu_list)
    grid = Gtk.Grid()
    grid.override_background_color(Gtk.StateType.NORMAL, Gdk.RGBA(1,1,1,1))
    gmonitor.add(grid)

    col = 0
    row = 0

    print("WARNING: Under Deveopment")
    print("WARNING: Doesn't really work yet!")
    print()

    devices = {}
    for k, v in gpu_list.list.items():
        # Card Number in top center of box
        devices[v.uuid] = {"card_num":  Gtk.Label()}
        devices[v.uuid]["card_num"].set_markup("<big><b>Card "+v.get_params_value(str("card_num"))+"</b></big>")
        devices[v.uuid]["card_num"].set_property("margin-top", 1)
        devices[v.uuid]["card_num"].set_property("margin-bottom", 1)
        devices[v.uuid]["card_num"].set_property("margin-right", 4)
        devices[v.uuid]["card_num"].set_property("margin-left", 4)
        devices[v.uuid]["card_num"].set_alignment(0, 0.5)

        lbox = Gtk.Box(spacing=6)
        lbox.override_background_color(Gtk.StateType.NORMAL, Gdk.RGBA(.06,.06,.06,.06))
        lbox.set_property("margin-top", 1)
        lbox.set_property("margin-bottom", 1)
        lbox.set_property("margin-right", 1)
        lbox.set_property("margin-left", 1)
        lbox.pack_start(devices[v.uuid]["card_num"], True, True, 0)
        grid.attach(lbox, col, row, 1, 1)
        row += 1

        # Card Model
        devices[v.uuid]["card_model"] = Gtk.Label()
        devices[v.uuid]["card_model"].set_markup(v.get_params_value("model"))
        devices[v.uuid]["card_model"].set_property("margin-top", 1)
        devices[v.uuid]["card_model"].set_property("margin-bottom", 1)
        devices[v.uuid]["card_model"].set_property("margin-right", 4)
        devices[v.uuid]["card_model"].set_property("margin-left", 4)

        lbox = Gtk.Box(spacing=6)
        lbox.override_background_color(Gtk.StateType.NORMAL, Gdk.RGBA(.06,.06,.06,.06))
        lbox.set_property("margin-top", 1)
        lbox.set_property("margin-bottom", 1)
        lbox.set_property("margin-right", 1)
        lbox.set_property("margin-left", 1)
        lbox.pack_start(devices[v.uuid]["card_model"], True, True, 0)
        grid.attach(lbox, col, row, 1, 1)
        row += 1

        # Card Path
        devices[v.uuid]["card_path"] = Gtk.Label()
        devices[v.uuid]["card_path"].set_markup(v.get_params_value("card_path"))
        devices[v.uuid]["card_path"].set_property("margin-top", 1)
        devices[v.uuid]["card_path"].set_property("margin-bottom", 1)
        devices[v.uuid]["card_path"].set_property("margin-right", 4)
        devices[v.uuid]["card_path"].set_property("margin-left", 4)

        lbox = Gtk.Box(spacing=6)
        lbox.override_background_color(Gtk.StateType.NORMAL, Gdk.RGBA(.06,.06,.06,.06))
        lbox.set_property("margin-top", 1)
        lbox.set_property("margin-bottom", 1)
        lbox.set_property("margin-right", 1)
        lbox.set_property("margin-left", 1)
        lbox.pack_start(devices[v.uuid]["card_path"], True, True, 0)
        grid.attach(lbox, col, row, 1, 1)
        row += 1

        # Card Power Cap
        devices[v.uuid]["power_cap"] = Gtk.Label()
        devices[v.uuid]["power_cap"].set_markup("<b>Power Cap: </b> "+ "Range (" +
                str(v.get_params_value("power_cap_min"))+" - "+str(v.get_params_value("power_cap_max"))+" W)")
        devices[v.uuid]["power_cap"].set_property("margin-top", 1)
        devices[v.uuid]["power_cap"].set_property("margin-bottom", 1)
        devices[v.uuid]["power_cap"].set_property("margin-right", 2)
        devices[v.uuid]["power_cap"].set_property("margin-left", 2)
        devices[v.uuid]["power_cap"].set_alignment(0, 0.5)

        lbox = Gtk.Box(spacing=6)
        lbox.override_background_color(Gtk.StateType.NORMAL, Gdk.RGBA(.06,.06,.06,.06))
        lbox.set_property("margin-top", 1)
        lbox.set_property("margin-bottom", 1)
        lbox.set_property("margin-right", 1)
        lbox.set_property("margin-left", 1)
        lbox.pack_start(devices[v.uuid]["power_cap"], True, True, 0)
        grid.attach(lbox, col, row, 1, 1)
        row += 1

        # Card Power Cap Value and Entry
        devices[v.uuid]["power_cap_cur"] = Gtk.Label()
        devices[v.uuid]["power_cap_cur"].set_text("    Current: "+str(v.get_params_value("power_cap"))+"W    Set: ")
        devices[v.uuid]["power_cap_cur"].set_property("margin-top", 1)
        devices[v.uuid]["power_cap_cur"].set_property("margin-bottom", 1)
        devices[v.uuid]["power_cap_cur"].set_property("margin-right", 2)
        devices[v.uuid]["power_cap_cur"].set_property("margin-left", 2)

        devices[v.uuid]["power_cap_ent"] = Gtk.Entry()
        devices[v.uuid]["power_cap_ent"].set_width_chars(4)
        devices[v.uuid]["power_cap_ent"].set_max_length(4)
        devices[v.uuid]["power_cap_ent"].set_alignment(xalign=1)
        devices[v.uuid]["power_cap_ent"].set_text(str(int(v.get_params_value("power_cap"))))
        devices[v.uuid]["power_cap_ent"].set_property("margin-top", 1)
        devices[v.uuid]["power_cap_ent"].set_property("margin-bottom", 1)
        devices[v.uuid]["power_cap_ent"].set_property("margin-right", 0)
        devices[v.uuid]["power_cap_ent"].set_property("margin-left", 2)

        devices[v.uuid]["power_cap_ent_unit"] = Gtk.Label()
        devices[v.uuid]["power_cap_ent_unit"].set_text("W")
        devices[v.uuid]["power_cap_ent_unit"].set_property("margin-top", 1)
        devices[v.uuid]["power_cap_ent_unit"].set_property("margin-bottom", 1)
        devices[v.uuid]["power_cap_ent_unit"].set_property("margin-right", 0)
        devices[v.uuid]["power_cap_ent_unit"].set_property("margin-left", 0)
        devices[v.uuid]["power_cap_ent_unit"].set_alignment(0, 0.5)

        lbox = Gtk.Box(Gtk.Orientation.HORIZONTAL, 0, spacing=2)
        lbox.set_homogeneous(False)
        lbox.override_background_color(Gtk.StateType.NORMAL, Gdk.RGBA(.06,.06,.06,.06))
        lbox.set_property("margin-top", 1)
        lbox.set_property("margin-bottom", 1)
        lbox.set_property("margin-right", 1)
        lbox.set_property("margin-left", 1)
        lbox.pack_start(devices[v.uuid]["power_cap_cur"], False, False, 0)
        lbox.pack_start(devices[v.uuid]["power_cap_ent"], False, False, 0)
        lbox.pack_start(devices[v.uuid]["power_cap_ent_unit"], False, False, 0)
        grid.attach(lbox, col, row, 1, 1)
        row += 1

        # Sclk P-States
        devices[v.uuid]["sclk_range"] = Gtk.Label()
        devices[v.uuid]["sclk_range"].set_markup("<b>Sclk P-States: </b> " +
                "Ranges " + str(v.get_params_value("sclk_f_range")[0]) +"-"+ str(v.get_params_value("sclk_f_range")[1]) +
                ", " + str(v.get_params_value("vddc_range")[0]) +"-"+ str(v.get_params_value("vddc_range")[1])+"  ")
        devices[v.uuid]["sclk_range"].set_property("margin-top", 1)
        devices[v.uuid]["sclk_range"].set_property("margin-bottom", 1)
        devices[v.uuid]["sclk_range"].set_property("margin-right", 2)
        devices[v.uuid]["sclk_range"].set_property("margin-left", 2)
        devices[v.uuid]["sclk_range"].set_alignment(0, 0.5)

        lbox = Gtk.Box(Gtk.Orientation.HORIZONTAL, spacing=6)
        lbox.set_homogeneous(False)
        lbox.override_background_color(Gtk.StateType.NORMAL, Gdk.RGBA(.06,.06,.06,.06))
        lbox.set_property("margin-top", 1)
        lbox.set_property("margin-bottom", 1)
        lbox.set_property("margin-right", 1)
        lbox.set_property("margin-left", 1)
        lbox.pack_start(devices[v.uuid]["sclk_range"], False, False, 0)
        grid.attach(lbox, col, row, 1, 1)
        row += 1

        # Sclk P-State Values and Entry
        devices[v.uuid]["sclk_pstate"] = {}
        for ps, psd in v.sclk_state.items():
            devices[v.uuid]["sclk_pstate"] = {ps:{"cur_f":"","cur_v":"", "gtk_cur_obj":"",
                "ent_f":"", "gtk_ent_f_obj":"", "ent_v":"", "gtk_ent_v_obj":""}}

            devices[v.uuid]["sclk_pstate"][ps]["gtk_cur_obj"] = Gtk.Label()
            devices[v.uuid]["sclk_pstate"][ps]["gtk_cur_obj"].set_text("    "+(str(ps)+":  " + str(psd[0]) +", "+ str(psd[1])))
            devices[v.uuid]["sclk_pstate"][ps]["gtk_cur_obj"].set_width_chars(20)
            devices[v.uuid]["sclk_pstate"][ps]["gtk_cur_obj"].set_alignment(0, 0.5)
            devices[v.uuid]["sclk_pstate"][ps]["gtk_cur_obj"].set_property("margin-top", 1)
            devices[v.uuid]["sclk_pstate"][ps]["gtk_cur_obj"].set_property("margin-bottom", 1)
            devices[v.uuid]["sclk_pstate"][ps]["gtk_cur_obj"].set_property("margin-right", 2)
            devices[v.uuid]["sclk_pstate"][ps]["gtk_cur_obj"].set_property("margin-left", 2)

            item_value = re.sub(r'[a-z,A-Z]*', '', str(psd[0]))
            item_unit = re.sub(r'[0-9][.]*[0-9]*', '', str(psd[0]))
            devices[v.uuid]["sclk_pstate"][ps]["gtk_ent_f_obj"] = Gtk.Entry()
            devices[v.uuid]["sclk_pstate"][ps]["gtk_ent_f_obj"].set_width_chars(5)
            devices[v.uuid]["sclk_pstate"][ps]["gtk_ent_f_obj"].set_max_length(5)
            devices[v.uuid]["sclk_pstate"][ps]["gtk_ent_f_obj"].set_alignment(xalign=1)
            devices[v.uuid]["sclk_pstate"][ps]["gtk_ent_f_obj"].set_text(item_value)
            devices[v.uuid]["sclk_pstate"][ps]["gtk_ent_f_obj"].set_property("margin-top", 1)
            devices[v.uuid]["sclk_pstate"][ps]["gtk_ent_f_obj"].set_property("margin-bottom", 1)
            devices[v.uuid]["sclk_pstate"][ps]["gtk_ent_f_obj"].set_property("margin-right", 0)
            devices[v.uuid]["sclk_pstate"][ps]["gtk_ent_f_obj"].set_property("margin-left", 0)

            devices[v.uuid]["sclk_pstate"][ps]["gtk_ent_f_obj_unit"] = Gtk.Label()
            devices[v.uuid]["sclk_pstate"][ps]["gtk_ent_f_obj_unit"].set_text(item_unit + "     ")
            devices[v.uuid]["sclk_pstate"][ps]["gtk_ent_f_obj_unit"].set_alignment(0, 0.5)
            devices[v.uuid]["sclk_pstate"][ps]["gtk_ent_f_obj_unit"].set_property("margin-top", 1)
            devices[v.uuid]["sclk_pstate"][ps]["gtk_ent_f_obj_unit"].set_property("margin-bottom", 1)
            devices[v.uuid]["sclk_pstate"][ps]["gtk_ent_f_obj_unit"].set_property("margin-right", 4)
            devices[v.uuid]["sclk_pstate"][ps]["gtk_ent_f_obj_unit"].set_property("margin-left", 0)

            item_value = re.sub(r'[a-z,A-Z]*', '', str(psd[1]))
            item_unit = re.sub(r'[0-9][.]*[0-9]*', '', str(psd[1]))
            devices[v.uuid]["sclk_pstate"][ps]["gtk_ent_v_obj"] = Gtk.Entry()
            devices[v.uuid]["sclk_pstate"][ps]["gtk_ent_v_obj"].set_width_chars(5)
            devices[v.uuid]["sclk_pstate"][ps]["gtk_ent_v_obj"].set_max_length(5)
            devices[v.uuid]["sclk_pstate"][ps]["gtk_ent_v_obj"].set_alignment(xalign=1)
            devices[v.uuid]["sclk_pstate"][ps]["gtk_ent_v_obj"].set_text(str(item_value))
            devices[v.uuid]["sclk_pstate"][ps]["gtk_ent_v_obj"].set_property("margin-top", 1)
            devices[v.uuid]["sclk_pstate"][ps]["gtk_ent_v_obj"].set_property("margin-bottom", 1)
            devices[v.uuid]["sclk_pstate"][ps]["gtk_ent_v_obj"].set_property("margin-right", 0)
            devices[v.uuid]["sclk_pstate"][ps]["gtk_ent_v_obj"].set_property("margin-left", 0)

            devices[v.uuid]["sclk_pstate"][ps]["gtk_ent_v_obj_unit"] = Gtk.Label()
            devices[v.uuid]["sclk_pstate"][ps]["gtk_ent_v_obj_unit"].set_text(item_unit)
            devices[v.uuid]["sclk_pstate"][ps]["gtk_ent_v_obj_unit"].set_alignment(0, 0.5)
            devices[v.uuid]["sclk_pstate"][ps]["gtk_ent_v_obj_unit"].set_property("margin-top", 1)
            devices[v.uuid]["sclk_pstate"][ps]["gtk_ent_v_obj_unit"].set_property("margin-bottom", 1)
            devices[v.uuid]["sclk_pstate"][ps]["gtk_ent_v_obj_unit"].set_property("margin-right", 0)
            devices[v.uuid]["sclk_pstate"][ps]["gtk_ent_v_obj_unit"].set_property("margin-left", 0)

            lbox = Gtk.Box(Gtk.Orientation.HORIZONTAL, spacing=6)
            lbox.set_homogeneous(False)
            lbox.override_background_color(Gtk.StateType.NORMAL, Gdk.RGBA(.06,.06,.06,.06))
            lbox.set_property("margin-top", 1)
            lbox.set_property("margin-bottom", 1)
            lbox.set_property("margin-right", 1)
            lbox.set_property("margin-left", 1)
            lbox.pack_start(devices[v.uuid]["sclk_pstate"][ps]["gtk_cur_obj"], False, False, 0)
            lbox.pack_start(devices[v.uuid]["sclk_pstate"][ps]["gtk_ent_f_obj"], False, False, 0)
            lbox.pack_start(devices[v.uuid]["sclk_pstate"][ps]["gtk_ent_f_obj_unit"], False, False, 0)
            lbox.pack_start(devices[v.uuid]["sclk_pstate"][ps]["gtk_ent_v_obj"], False, False, 0)
            lbox.pack_start(devices[v.uuid]["sclk_pstate"][ps]["gtk_ent_v_obj_unit"], False, False, 0)
            grid.attach(lbox, col, row, 1, 1)
            row += 1

        # Mclk P-States
        devices[v.uuid]["mclk_range"] = Gtk.Label()
        devices[v.uuid]["mclk_range"].set_markup("<b>Mclk P-States: </b> " +
                "Ranges " + str(v.get_params_value("mclk_f_range")[0]) +"-"+ str(v.get_params_value("mclk_f_range")[1]) +
                ", " + str(v.get_params_value("vddc_range")[0]) +"-"+ str(v.get_params_value("vddc_range")[1]))
        devices[v.uuid]["mclk_range"].set_property("margin-top", 1)
        devices[v.uuid]["mclk_range"].set_property("margin-bottom", 1)
        devices[v.uuid]["mclk_range"].set_property("margin-right", 2)
        devices[v.uuid]["mclk_range"].set_property("margin-left", 2)
        devices[v.uuid]["mclk_range"].set_alignment(0, 0.5)

        lbox = Gtk.Box(Gtk.Orientation.HORIZONTAL, spacing=6)
        lbox.set_homogeneous(False)
        lbox.override_background_color(Gtk.StateType.NORMAL, Gdk.RGBA(.06,.06,.06,.06))
        lbox.set_property("margin-top", 1)
        lbox.set_property("margin-bottom", 1)
        lbox.set_property("margin-right", 1)
        lbox.set_property("margin-left", 1)
        lbox.pack_start(devices[v.uuid]["mclk_range"], True, True, 0)
        grid.attach(lbox, col, row, 1, 1)
        row += 1

        # Sclk M-State Values and Entry
        for ps, psd in v.mclk_state.items():
            devices[v.uuid]["mclk_pstate"] = {ps:{"cur_f":"","cur_v":"", "gtk_cur_obj":"",
                "ent_f":"", "gtk_ent_f_obj":"", "ent_v":"", "gtk_ent_v_obj":""}}

            devices[v.uuid]["mclk_pstate"][ps]["gtk_cur_obj"] = Gtk.Label()
            devices[v.uuid]["mclk_pstate"][ps]["gtk_cur_obj"].set_text("    "+(str(ps)+":  " + str(psd[0]) +", "+ str(psd[1])))
            devices[v.uuid]["mclk_pstate"][ps]["gtk_cur_obj"].set_width_chars(20)
            devices[v.uuid]["mclk_pstate"][ps]["gtk_cur_obj"].set_alignment(0, 0.5)
            devices[v.uuid]["mclk_pstate"][ps]["gtk_cur_obj"].set_property("margin-top", 1)
            devices[v.uuid]["mclk_pstate"][ps]["gtk_cur_obj"].set_property("margin-bottom", 1)
            devices[v.uuid]["mclk_pstate"][ps]["gtk_cur_obj"].set_property("margin-right", 2)
            devices[v.uuid]["mclk_pstate"][ps]["gtk_cur_obj"].set_property("margin-left", 2)

            item_value = re.sub(r'[a-z,A-Z]*', '', str(psd[0]))
            item_unit = re.sub(r'[0-9][.]*[0-9]*', '', str(psd[0]))
            devices[v.uuid]["mclk_pstate"][ps]["gtk_ent_f_obj"] = Gtk.Entry()
            devices[v.uuid]["mclk_pstate"][ps]["gtk_ent_f_obj"].set_width_chars(5)
            devices[v.uuid]["mclk_pstate"][ps]["gtk_ent_f_obj"].set_max_length(5)
            devices[v.uuid]["mclk_pstate"][ps]["gtk_ent_f_obj"].set_alignment(xalign=1)
            devices[v.uuid]["mclk_pstate"][ps]["gtk_ent_f_obj"].set_text(item_value)
            devices[v.uuid]["mclk_pstate"][ps]["gtk_ent_f_obj"].set_property("margin-top", 1)
            devices[v.uuid]["mclk_pstate"][ps]["gtk_ent_f_obj"].set_property("margin-bottom", 1)
            devices[v.uuid]["mclk_pstate"][ps]["gtk_ent_f_obj"].set_property("margin-right", 0)
            devices[v.uuid]["mclk_pstate"][ps]["gtk_ent_f_obj"].set_property("margin-left", 0)

            devices[v.uuid]["mclk_pstate"][ps]["gtk_ent_f_obj_unit"] = Gtk.Label()
            devices[v.uuid]["mclk_pstate"][ps]["gtk_ent_f_obj_unit"].set_text(item_unit + "     ")
            devices[v.uuid]["mclk_pstate"][ps]["gtk_ent_f_obj_unit"].set_alignment(0, 0.5)
            devices[v.uuid]["mclk_pstate"][ps]["gtk_ent_f_obj_unit"].set_property("margin-top", 1)
            devices[v.uuid]["mclk_pstate"][ps]["gtk_ent_f_obj_unit"].set_property("margin-bottom", 1)
            devices[v.uuid]["mclk_pstate"][ps]["gtk_ent_f_obj_unit"].set_property("margin-right", 4)
            devices[v.uuid]["mclk_pstate"][ps]["gtk_ent_f_obj_unit"].set_property("margin-left", 0)

            item_value = re.sub(r'[a-z,A-Z]*', '', str(psd[1]))
            item_unit = re.sub(r'[0-9][.]*[0-9]*', '', str(psd[1]))
            devices[v.uuid]["mclk_pstate"][ps]["gtk_ent_v_obj"] = Gtk.Entry()
            devices[v.uuid]["mclk_pstate"][ps]["gtk_ent_v_obj"].set_width_chars(5)
            devices[v.uuid]["mclk_pstate"][ps]["gtk_ent_v_obj"].set_max_length(5)
            devices[v.uuid]["mclk_pstate"][ps]["gtk_ent_v_obj"].set_alignment(xalign=1)
            devices[v.uuid]["mclk_pstate"][ps]["gtk_ent_v_obj"].set_text(item_value)
            devices[v.uuid]["mclk_pstate"][ps]["gtk_ent_v_obj"].set_property("margin-top", 1)
            devices[v.uuid]["mclk_pstate"][ps]["gtk_ent_v_obj"].set_property("margin-bottom", 1)
            devices[v.uuid]["mclk_pstate"][ps]["gtk_ent_v_obj"].set_property("margin-right", 0)
            devices[v.uuid]["mclk_pstate"][ps]["gtk_ent_v_obj"].set_property("margin-left", 0)

            devices[v.uuid]["mclk_pstate"][ps]["gtk_ent_v_obj_unit"] = Gtk.Label()
            devices[v.uuid]["mclk_pstate"][ps]["gtk_ent_v_obj_unit"].set_text(item_unit)
            devices[v.uuid]["mclk_pstate"][ps]["gtk_ent_v_obj_unit"].set_alignment(0, 0.5)
            devices[v.uuid]["mclk_pstate"][ps]["gtk_ent_v_obj_unit"].set_property("margin-top", 1)
            devices[v.uuid]["mclk_pstate"][ps]["gtk_ent_v_obj_unit"].set_property("margin-bottom", 1)
            devices[v.uuid]["mclk_pstate"][ps]["gtk_ent_v_obj_unit"].set_property("margin-right", 4)
            devices[v.uuid]["mclk_pstate"][ps]["gtk_ent_v_obj_unit"].set_property("margin-left", 0)

            lbox = Gtk.Box(Gtk.Orientation.HORIZONTAL, spacing=6)
            lbox.set_homogeneous(False)
            lbox.override_background_color(Gtk.StateType.NORMAL, Gdk.RGBA(.06,.06,.06,.06))
            lbox.set_property("margin-top", 1)
            lbox.set_property("margin-bottom", 1)
            lbox.set_property("margin-right", 1)
            lbox.set_property("margin-left", 1)
            lbox.pack_start(devices[v.uuid]["mclk_pstate"][ps]["gtk_cur_obj"], False, False, 0)
            lbox.pack_start(devices[v.uuid]["mclk_pstate"][ps]["gtk_ent_f_obj"], False, False, 0)
            lbox.pack_start(devices[v.uuid]["mclk_pstate"][ps]["gtk_ent_f_obj_unit"], False, False, 0)
            lbox.pack_start(devices[v.uuid]["mclk_pstate"][ps]["gtk_ent_v_obj"], False, False, 0)
            lbox.pack_start(devices[v.uuid]["mclk_pstate"][ps]["gtk_ent_v_obj_unit"], False, False, 0)
            grid.attach(lbox, col, row, 1, 1)
            row += 1

        # Power Performance Mode Selection
        devices[v.uuid]["ppm"] = Gtk.Label()
        devices[v.uuid]["ppm"].set_markup("<b>Power Performance Modes:</b>")
        devices[v.uuid]["ppm"].set_property("margin-top", 1)
        devices[v.uuid]["ppm"].set_property("margin-bottom", 1)
        devices[v.uuid]["ppm"].set_property("margin-right", 2)
        devices[v.uuid]["ppm"].set_property("margin-left", 2)
        devices[v.uuid]["ppm"].set_alignment(0, 0.5)

        lbox = Gtk.Box(spacing=6)
        lbox.override_background_color(Gtk.StateType.NORMAL, Gdk.RGBA(.06,.06,.06,.06))
        lbox.set_property("margin-top", 1)
        lbox.set_property("margin-bottom", 1)
        lbox.set_property("margin-right", 1)
        lbox.set_property("margin-left", 1)
        lbox.pack_start(devices[v.uuid]["ppm"], True, True, 0)
        grid.attach(lbox, col, row, 1, 1)
        row += 1

        devices[v.uuid]["ppm_modes"] = Gtk.ListStore(int, str)
        mode_item = {}
        item_num = 0
        for mode_num, mode in v.ppm_modes.items():
            if mode_num == "NUM": continue
            devices[v.uuid]["ppm_modes"].append([int(mode_num), mode[0]])
            mode_item[int(mode_num)] = item_num
            item_num += 1

        lbox = Gtk.Box(spacing=6)
        lbox.override_background_color(Gtk.StateType.NORMAL, Gdk.RGBA(.06,.06,.06,.06))
        lbox.set_property("margin-top", 1)
        lbox.set_property("margin-bottom", 1)
        lbox.set_property("margin-right", 1)
        lbox.set_property("margin-left", 1)

        ppm_mode_combo = Gtk.ComboBox.new_with_model_and_entry(devices[v.uuid]["ppm_modes"])
        #name_combo.connect("changed", self.on_name_combo_changed)
        ppm_mode_combo.set_entry_text_column(1)
        ppm_mode_combo.set_active(mode_item[v.get_current_ppm_mode()[0]])
        lbox.pack_start(ppm_mode_combo, False, False, 0)
        grid.attach(lbox, col, row, 1, 1)
        row += 1

        # Save/Reset Card Buttons
        devices[v.uuid]["save_button"] = Gtk.Button("")
        for child in devices[v.uuid]["save_button"].get_children():
            child.set_label("<big><b>Save</b></big>")
            child.set_use_markup(True)
        devices[v.uuid]["save_button"].connect("clicked", save_card, devices[v.uuid])
        devices[v.uuid]["save_button"].set_property("width-request", 90)

        devices[v.uuid]["reset_button"] = Gtk.Button("")
        for child in devices[v.uuid]["reset_button"].get_children():
            child.set_label("<big><b>Reset</b></big>")
            child.set_use_markup(True)
        devices[v.uuid]["reset_button"].connect("clicked", reset_card, devices[v.uuid])
        devices[v.uuid]["reset_button"].set_property("width-request", 90)

        lbox = Gtk.Box(Gtk.Orientation.HORIZONTAL, spacing=6)
        lbox.set_homogeneous(False)
        lbox.override_background_color(Gtk.StateType.NORMAL, Gdk.RGBA(.06,.06,.06,.06))
        lbox.set_property("margin-top", 1)
        lbox.set_property("margin-bottom", 1)
        lbox.set_property("margin-right", 1)
        lbox.set_property("margin-left", 1)
        lbox.pack_start(devices[v.uuid]["save_button"], True, False, 0)
        lbox.pack_start(devices[v.uuid]["reset_button"], True, False, 0)
        grid.attach(lbox, col, row, 1, 1)
        row += 1

        # Increment column before going to next Device
        col += 1


    gmonitor.connect("delete-event", Gtk.main_quit)
    gmonitor.show_all()

    # Start thread to update Monitor
    #monthread = threading.Thread(target=refresh, daemon=True, args=[gut_const.SLEEP, updateData, gpu_list, devices]).start()

    Gtk.main()



if __name__ == "__main__":
    main()
