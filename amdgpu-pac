#!/usr/bin/env python3
"""amdgpu-pac  -  A utility program and control compatible AMD GPUs

    A utility to modify the settings, including p-states and power-performance modes, of
    compatible AMD GPUs.

    Copyright (C) 2019  RueiKe

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.
"""
__author__ = "RueiKe"
__copyright__ = "Copyright (C) 2019 RueiKe"
__credits__ = ""
__license__ = "GNU General Public License"
__program_name__ = "amdgpu-pac"
__version__ = "v2.0.0"
__maintainer__ = "RueiKe"
__status__ = "Development"

import gi
gi.require_version("Gtk", "3.0")
from gi.repository import GLib, Gtk, Gdk
import argparse
import re
import subprocess
import threading
import os
import platform
import sys
import time
from GPUmodules import GPUmodules as GPU
from datetime import datetime
from uuid import uuid4
import glob 
import shutil 
from pathlib import Path

# Instantiate project constants
gut_const = GPU.GUT_CONST()

class PACWindow(Gtk.Window):
    def __init__(self, gpu_list, devices):
        Gtk.Window.__init__(self, title="amdgpu-pac")
        self.set_border_width(1)
        if(os.path.isfile(gut_const.PATH + '/amdgpu-pac.icon.png') == True):
            self.set_icon_from_file(gut_const.PATH + '/amdgpu-pac.icon.png')
        grid = Gtk.Grid()
        grid.override_background_color(Gtk.StateType.NORMAL, Gdk.RGBA(1,1,1,1))
        self.add(grid)

        num_com_amd_gpus = gpu_list.num_compatible_gpus()
        col = 0
        for k, v in gpu_list.list.items():
            row = 0
            # Card Number in top center of box
            devices[v.uuid] = {"card_num":  Gtk.Label()}
            devices[v.uuid]["card_num"].set_markup("<big><b>Card "+ v.get_params_value(str("card_num")) +
                    ":  </b>" + v.get_params_value("model") + "</big>")
            devices[v.uuid]["card_num"].set_property("margin-top", 1)
            devices[v.uuid]["card_num"].set_property("margin-bottom", 1)
            devices[v.uuid]["card_num"].set_property("margin-right", 4)
            devices[v.uuid]["card_num"].set_property("margin-left", 4)
            devices[v.uuid]["card_num"].set_alignment(0.5, 0.5)

            lbox = Gtk.Box(spacing=6)
            #lbox.override_background_color(Gtk.StateType.NORMAL, Gdk.RGBA(.0,.30,.40,0.4))
            lbox.override_background_color(Gtk.StateType.NORMAL, Gdk.RGBA(.60,.80,1.0,0.4))
            lbox.set_property("margin-top", 1)
            lbox.set_property("margin-bottom", 1)
            lbox.set_property("margin-right", 1)
            lbox.set_property("margin-left", 1)
            lbox.pack_start(devices[v.uuid]["card_num"], True, True, 0)
            grid.attach(lbox, col, row, 1, 1)
            row += 1

            # Card Path
            devices[v.uuid]["card_path"] = Gtk.Label()
            devices[v.uuid]["card_path"].set_markup("<b>Device: </b>" + v.get_params_value("card_path"))
            devices[v.uuid]["card_path"].set_property("margin-top", 1)
            devices[v.uuid]["card_path"].set_property("margin-bottom", 1)
            devices[v.uuid]["card_path"].set_property("margin-right", 4)
            devices[v.uuid]["card_path"].set_property("margin-left", 4)
            devices[v.uuid]["card_path"].set_alignment(0, 0.5)

            lbox = Gtk.Box(spacing=6)
            lbox.override_background_color(Gtk.StateType.NORMAL, Gdk.RGBA(.06,.06,.06,.06))
            lbox.set_property("margin-top", 1)
            lbox.set_property("margin-bottom", 1)
            lbox.set_property("margin-right", 1)
            lbox.set_property("margin-left", 1)
            lbox.pack_start(devices[v.uuid]["card_path"], True, True, 0)
            grid.attach(lbox, col, row, 1, 1)
            row += 1

            # Card Power Cap
            devices[v.uuid]["power_cap"] = Gtk.Label()
            devices[v.uuid]["power_cap"].set_markup("<b>Power Cap: </b> "+ "Range (" +
                    str(v.get_params_value("power_cap_min"))+" - "+str(v.get_params_value("power_cap_max"))+" W)")
            devices[v.uuid]["power_cap"].set_property("margin-top", 1)
            devices[v.uuid]["power_cap"].set_property("margin-bottom", 1)
            devices[v.uuid]["power_cap"].set_property("margin-right", 2)
            devices[v.uuid]["power_cap"].set_property("margin-left", 2)
            devices[v.uuid]["power_cap"].set_alignment(0, 0.5)

            lbox = Gtk.Box(spacing=6)
            lbox.override_background_color(Gtk.StateType.NORMAL, Gdk.RGBA(.06,.06,.06,.06))
            lbox.set_property("margin-top", 1)
            lbox.set_property("margin-bottom", 1)
            lbox.set_property("margin-right", 1)
            lbox.set_property("margin-left", 1)
            lbox.pack_start(devices[v.uuid]["power_cap"], True, True, 0)
            grid.attach(lbox, col, row, 1, 1)
            row += 1

            # Card Power Cap Value and Entry
            devices[v.uuid]["power_cap_cur"] = Gtk.Label()
            #devices[v.uuid]["power_cap_cur"].set_text("    Current: "+str(v.get_params_value("power_cap"))+"W    Set: ")
            devices[v.uuid]["power_cap_cur"].set_property("margin-top", 1)
            devices[v.uuid]["power_cap_cur"].set_property("margin-bottom", 1)
            devices[v.uuid]["power_cap_cur"].set_property("margin-right", 2)
            devices[v.uuid]["power_cap_cur"].set_property("margin-left", 2)

            devices[v.uuid]["power_cap_ent"] = Gtk.Entry()
            devices[v.uuid]["power_cap_ent"].set_width_chars(4)
            devices[v.uuid]["power_cap_ent"].set_max_length(4)
            devices[v.uuid]["power_cap_ent"].set_alignment(xalign=1)
            #devices[v.uuid]["power_cap_ent"].set_text(str(int(v.get_params_value("power_cap"))))
            devices[v.uuid]["power_cap_ent"].set_property("margin-top", 1)
            devices[v.uuid]["power_cap_ent"].set_property("margin-bottom", 1)
            devices[v.uuid]["power_cap_ent"].set_property("margin-right", 0)
            devices[v.uuid]["power_cap_ent"].set_property("margin-left", 2)

            devices[v.uuid]["power_cap_ent_unit"] = Gtk.Label()
            devices[v.uuid]["power_cap_ent_unit"].set_text("W")
            devices[v.uuid]["power_cap_ent_unit"].set_property("margin-top", 1)
            devices[v.uuid]["power_cap_ent_unit"].set_property("margin-bottom", 1)
            devices[v.uuid]["power_cap_ent_unit"].set_property("margin-right", 0)
            devices[v.uuid]["power_cap_ent_unit"].set_property("margin-left", 0)
            devices[v.uuid]["power_cap_ent_unit"].set_alignment(0, 0.5)

            lbox = Gtk.Box(Gtk.Orientation.HORIZONTAL, 0, spacing=2)
            lbox.set_homogeneous(False)
            lbox.override_background_color(Gtk.StateType.NORMAL, Gdk.RGBA(.06,.06,.06,.06))
            lbox.set_property("margin-top", 1)
            lbox.set_property("margin-bottom", 1)
            lbox.set_property("margin-right", 1)
            lbox.set_property("margin-left", 1)
            lbox.pack_start(devices[v.uuid]["power_cap_cur"], False, False, 0)
            lbox.pack_start(devices[v.uuid]["power_cap_ent"], False, False, 0)
            lbox.pack_start(devices[v.uuid]["power_cap_ent_unit"], False, False, 0)
            grid.attach(lbox, col, row, 1, 1)
            row += 1

            # Sclk P-States
            devices[v.uuid]["sclk_range"] = Gtk.Label()
            devices[v.uuid]["sclk_range"].set_markup("<b>Sclk P-States: </b> " +
                    "Ranges " + str(v.get_params_value("sclk_f_range")[0]) +"-"+ str(v.get_params_value("sclk_f_range")[1]) +
                    ", " + str(v.get_params_value("vddc_range")[0]) +"-"+ str(v.get_params_value("vddc_range")[1])+"  ")
            devices[v.uuid]["sclk_range"].set_property("margin-top", 1)
            devices[v.uuid]["sclk_range"].set_property("margin-bottom", 1)
            devices[v.uuid]["sclk_range"].set_property("margin-right", 2)
            devices[v.uuid]["sclk_range"].set_property("margin-left", 2)
            devices[v.uuid]["sclk_range"].set_alignment(0, 0.5)

            lbox = Gtk.Box(Gtk.Orientation.HORIZONTAL, spacing=6)
            lbox.set_homogeneous(False)
            lbox.override_background_color(Gtk.StateType.NORMAL, Gdk.RGBA(.06,.06,.06,.06))
            lbox.set_property("margin-top", 1)
            lbox.set_property("margin-bottom", 1)
            lbox.set_property("margin-right", 1)
            lbox.set_property("margin-left", 1)
            lbox.pack_start(devices[v.uuid]["sclk_range"], False, False, 0)
            grid.attach(lbox, col, row, 1, 1)
            row += 1

            # Sclk P-State Values and Entry
            devices[v.uuid]["sclk_pstate"] = {}
            for ps, psd in v.sclk_state.items():
                devices[v.uuid]["sclk_pstate"][ps] = {}

                devices[v.uuid]["sclk_pstate"][ps]["gtk_cur_obj"] = Gtk.Label()
                #devices[v.uuid]["sclk_pstate"][ps]["gtk_cur_obj"].set_text("    "+(str(ps)+":  " + str(psd[0]) +", "+ str(psd[1])))
                devices[v.uuid]["sclk_pstate"][ps]["gtk_cur_obj"].set_width_chars(20)
                devices[v.uuid]["sclk_pstate"][ps]["gtk_cur_obj"].set_alignment(0, 0.5)
                devices[v.uuid]["sclk_pstate"][ps]["gtk_cur_obj"].set_property("margin-top", 1)
                devices[v.uuid]["sclk_pstate"][ps]["gtk_cur_obj"].set_property("margin-bottom", 1)
                devices[v.uuid]["sclk_pstate"][ps]["gtk_cur_obj"].set_property("margin-right", 2)
                devices[v.uuid]["sclk_pstate"][ps]["gtk_cur_obj"].set_property("margin-left", 2)

                #item_value = re.sub(r'[a-z,A-Z]*', '', str(psd[0]))
                #item_unit = re.sub(r'[0-9][.]*[0-9]*', '', str(psd[0]))
                devices[v.uuid]["sclk_pstate"][ps]["gtk_ent_f_obj"] = Gtk.Entry()
                devices[v.uuid]["sclk_pstate"][ps]["gtk_ent_f_obj"].set_width_chars(5)
                devices[v.uuid]["sclk_pstate"][ps]["gtk_ent_f_obj"].set_max_length(5)
                devices[v.uuid]["sclk_pstate"][ps]["gtk_ent_f_obj"].set_alignment(xalign=1)
                #devices[v.uuid]["sclk_pstate"][ps]["gtk_ent_f_obj"].set_text(item_value)
                devices[v.uuid]["sclk_pstate"][ps]["gtk_ent_f_obj"].set_property("margin-top", 1)
                devices[v.uuid]["sclk_pstate"][ps]["gtk_ent_f_obj"].set_property("margin-bottom", 1)
                devices[v.uuid]["sclk_pstate"][ps]["gtk_ent_f_obj"].set_property("margin-right", 0)
                devices[v.uuid]["sclk_pstate"][ps]["gtk_ent_f_obj"].set_property("margin-left", 0)

                devices[v.uuid]["sclk_pstate"][ps]["gtk_ent_f_obj_unit"] = Gtk.Label()
                #devices[v.uuid]["sclk_pstate"][ps]["gtk_ent_f_obj_unit"].set_text(item_unit + "     ")
                devices[v.uuid]["sclk_pstate"][ps]["gtk_ent_f_obj_unit"].set_alignment(0, 0.5)
                devices[v.uuid]["sclk_pstate"][ps]["gtk_ent_f_obj_unit"].set_property("margin-top", 1)
                devices[v.uuid]["sclk_pstate"][ps]["gtk_ent_f_obj_unit"].set_property("margin-bottom", 1)
                devices[v.uuid]["sclk_pstate"][ps]["gtk_ent_f_obj_unit"].set_property("margin-right", 4)
                devices[v.uuid]["sclk_pstate"][ps]["gtk_ent_f_obj_unit"].set_property("margin-left", 0)

                #item_value = re.sub(r'[a-z,A-Z]*', '', str(psd[1]))
                #item_unit = re.sub(r'[0-9][.]*[0-9]*', '', str(psd[1]))
                devices[v.uuid]["sclk_pstate"][ps]["gtk_ent_v_obj"] = Gtk.Entry()
                devices[v.uuid]["sclk_pstate"][ps]["gtk_ent_v_obj"].set_width_chars(5)
                devices[v.uuid]["sclk_pstate"][ps]["gtk_ent_v_obj"].set_max_length(5)
                devices[v.uuid]["sclk_pstate"][ps]["gtk_ent_v_obj"].set_alignment(xalign=1)
                #devices[v.uuid]["sclk_pstate"][ps]["gtk_ent_v_obj"].set_text(str(item_value))
                devices[v.uuid]["sclk_pstate"][ps]["gtk_ent_v_obj"].set_property("margin-top", 1)
                devices[v.uuid]["sclk_pstate"][ps]["gtk_ent_v_obj"].set_property("margin-bottom", 1)
                devices[v.uuid]["sclk_pstate"][ps]["gtk_ent_v_obj"].set_property("margin-right", 0)
                devices[v.uuid]["sclk_pstate"][ps]["gtk_ent_v_obj"].set_property("margin-left", 0)

                devices[v.uuid]["sclk_pstate"][ps]["gtk_ent_v_obj_unit"] = Gtk.Label()
                #devices[v.uuid]["sclk_pstate"][ps]["gtk_ent_v_obj_unit"].set_text(item_unit)
                devices[v.uuid]["sclk_pstate"][ps]["gtk_ent_v_obj_unit"].set_alignment(0, 0.5)
                devices[v.uuid]["sclk_pstate"][ps]["gtk_ent_v_obj_unit"].set_property("margin-top", 1)
                devices[v.uuid]["sclk_pstate"][ps]["gtk_ent_v_obj_unit"].set_property("margin-bottom", 1)
                devices[v.uuid]["sclk_pstate"][ps]["gtk_ent_v_obj_unit"].set_property("margin-right", 0)
                devices[v.uuid]["sclk_pstate"][ps]["gtk_ent_v_obj_unit"].set_property("margin-left", 0)

                lbox = Gtk.Box(Gtk.Orientation.HORIZONTAL, spacing=6)
                lbox.set_homogeneous(False)
                lbox.override_background_color(Gtk.StateType.NORMAL, Gdk.RGBA(.06,.06,.06,.06))
                lbox.set_property("margin-top", 1)
                lbox.set_property("margin-bottom", 1)
                lbox.set_property("margin-right", 1)
                lbox.set_property("margin-left", 1)
                lbox.pack_start(devices[v.uuid]["sclk_pstate"][ps]["gtk_cur_obj"], False, False, 0)
                lbox.pack_start(devices[v.uuid]["sclk_pstate"][ps]["gtk_ent_f_obj"], False, False, 0)
                lbox.pack_start(devices[v.uuid]["sclk_pstate"][ps]["gtk_ent_f_obj_unit"], False, False, 0)
                lbox.pack_start(devices[v.uuid]["sclk_pstate"][ps]["gtk_ent_v_obj"], False, False, 0)
                lbox.pack_start(devices[v.uuid]["sclk_pstate"][ps]["gtk_ent_v_obj_unit"], False, False, 0)
                grid.attach(lbox, col, row, 1, 1)
                row += 1

            # Mclk P-States
            devices[v.uuid]["mclk_range"] = Gtk.Label()
            devices[v.uuid]["mclk_range"].set_markup("<b>Mclk P-States: </b> " +
                    "Ranges " + str(v.get_params_value("mclk_f_range")[0]) +"-"+ str(v.get_params_value("mclk_f_range")[1]) +
                    ", " + str(v.get_params_value("vddc_range")[0]) +"-"+ str(v.get_params_value("vddc_range")[1]))
            devices[v.uuid]["mclk_range"].set_property("margin-top", 1)
            devices[v.uuid]["mclk_range"].set_property("margin-bottom", 1)
            devices[v.uuid]["mclk_range"].set_property("margin-right", 2)
            devices[v.uuid]["mclk_range"].set_property("margin-left", 2)
            devices[v.uuid]["mclk_range"].set_alignment(0, 0.5)

            lbox = Gtk.Box(Gtk.Orientation.HORIZONTAL, spacing=6)
            lbox.set_homogeneous(False)
            lbox.override_background_color(Gtk.StateType.NORMAL, Gdk.RGBA(.06,.06,.06,.06))
            lbox.set_property("margin-top", 1)
            lbox.set_property("margin-bottom", 1)
            lbox.set_property("margin-right", 1)
            lbox.set_property("margin-left", 1)
            lbox.pack_start(devices[v.uuid]["mclk_range"], True, True, 0)
            grid.attach(lbox, col, row, 1, 1)
            row += 1

            # Mclk P-State Values and Entry
            devices[v.uuid]["mclk_pstate"] = {}
            for ps, psd in v.mclk_state.items():
                devices[v.uuid]["mclk_pstate"][ps] = {}

                devices[v.uuid]["mclk_pstate"][ps]["gtk_cur_obj"] = Gtk.Label()
                #devices[v.uuid]["mclk_pstate"][ps]["gtk_cur_obj"].set_text("    "+(str(ps)+":  " + str(psd[0]) +", "+ str(psd[1])))
                devices[v.uuid]["mclk_pstate"][ps]["gtk_cur_obj"].set_width_chars(20)
                devices[v.uuid]["mclk_pstate"][ps]["gtk_cur_obj"].set_alignment(0, 0.5)
                devices[v.uuid]["mclk_pstate"][ps]["gtk_cur_obj"].set_property("margin-top", 1)
                devices[v.uuid]["mclk_pstate"][ps]["gtk_cur_obj"].set_property("margin-bottom", 1)
                devices[v.uuid]["mclk_pstate"][ps]["gtk_cur_obj"].set_property("margin-right", 2)
                devices[v.uuid]["mclk_pstate"][ps]["gtk_cur_obj"].set_property("margin-left", 2)

                #item_value = re.sub(r'[a-z,A-Z]*', '', str(psd[0]))
                #item_unit = re.sub(r'[0-9][.]*[0-9]*', '', str(psd[0]))
                devices[v.uuid]["mclk_pstate"][ps]["gtk_ent_f_obj"] = Gtk.Entry()
                devices[v.uuid]["mclk_pstate"][ps]["gtk_ent_f_obj"].set_width_chars(5)
                devices[v.uuid]["mclk_pstate"][ps]["gtk_ent_f_obj"].set_max_length(5)
                devices[v.uuid]["mclk_pstate"][ps]["gtk_ent_f_obj"].set_alignment(xalign=1)
                #devices[v.uuid]["mclk_pstate"][ps]["gtk_ent_f_obj"].set_text(item_value)
                devices[v.uuid]["mclk_pstate"][ps]["gtk_ent_f_obj"].set_property("margin-top", 1)
                devices[v.uuid]["mclk_pstate"][ps]["gtk_ent_f_obj"].set_property("margin-bottom", 1)
                devices[v.uuid]["mclk_pstate"][ps]["gtk_ent_f_obj"].set_property("margin-right", 0)
                devices[v.uuid]["mclk_pstate"][ps]["gtk_ent_f_obj"].set_property("margin-left", 0)

                devices[v.uuid]["mclk_pstate"][ps]["gtk_ent_f_obj_unit"] = Gtk.Label()
                #devices[v.uuid]["mclk_pstate"][ps]["gtk_ent_f_obj_unit"].set_text(item_unit + "     ")
                devices[v.uuid]["mclk_pstate"][ps]["gtk_ent_f_obj_unit"].set_alignment(0, 0.5)
                devices[v.uuid]["mclk_pstate"][ps]["gtk_ent_f_obj_unit"].set_property("margin-top", 1)
                devices[v.uuid]["mclk_pstate"][ps]["gtk_ent_f_obj_unit"].set_property("margin-bottom", 1)
                devices[v.uuid]["mclk_pstate"][ps]["gtk_ent_f_obj_unit"].set_property("margin-right", 4)
                devices[v.uuid]["mclk_pstate"][ps]["gtk_ent_f_obj_unit"].set_property("margin-left", 0)

                #item_value = re.sub(r'[a-z,A-Z]*', '', str(psd[1]))
                #item_unit = re.sub(r'[0-9][.]*[0-9]*', '', str(psd[1]))
                devices[v.uuid]["mclk_pstate"][ps]["gtk_ent_v_obj"] = Gtk.Entry()
                devices[v.uuid]["mclk_pstate"][ps]["gtk_ent_v_obj"].set_width_chars(5)
                devices[v.uuid]["mclk_pstate"][ps]["gtk_ent_v_obj"].set_max_length(5)
                devices[v.uuid]["mclk_pstate"][ps]["gtk_ent_v_obj"].set_alignment(xalign=1)
                #devices[v.uuid]["mclk_pstate"][ps]["gtk_ent_v_obj"].set_text(item_value)
                devices[v.uuid]["mclk_pstate"][ps]["gtk_ent_v_obj"].set_property("margin-top", 1)
                devices[v.uuid]["mclk_pstate"][ps]["gtk_ent_v_obj"].set_property("margin-bottom", 1)
                devices[v.uuid]["mclk_pstate"][ps]["gtk_ent_v_obj"].set_property("margin-right", 0)
                devices[v.uuid]["mclk_pstate"][ps]["gtk_ent_v_obj"].set_property("margin-left", 0)

                devices[v.uuid]["mclk_pstate"][ps]["gtk_ent_v_obj_unit"] = Gtk.Label()
                #devices[v.uuid]["mclk_pstate"][ps]["gtk_ent_v_obj_unit"].set_text(item_unit)
                devices[v.uuid]["mclk_pstate"][ps]["gtk_ent_v_obj_unit"].set_alignment(0, 0.5)
                devices[v.uuid]["mclk_pstate"][ps]["gtk_ent_v_obj_unit"].set_property("margin-top", 1)
                devices[v.uuid]["mclk_pstate"][ps]["gtk_ent_v_obj_unit"].set_property("margin-bottom", 1)
                devices[v.uuid]["mclk_pstate"][ps]["gtk_ent_v_obj_unit"].set_property("margin-right", 4)
                devices[v.uuid]["mclk_pstate"][ps]["gtk_ent_v_obj_unit"].set_property("margin-left", 0)

                lbox = Gtk.Box(Gtk.Orientation.HORIZONTAL, spacing=6)
                lbox.set_homogeneous(False)
                lbox.override_background_color(Gtk.StateType.NORMAL, Gdk.RGBA(.06,.06,.06,.06))
                lbox.set_property("margin-top", 1)
                lbox.set_property("margin-bottom", 1)
                lbox.set_property("margin-right", 1)
                lbox.set_property("margin-left", 1)
                lbox.pack_start(devices[v.uuid]["mclk_pstate"][ps]["gtk_cur_obj"], False, False, 0)
                lbox.pack_start(devices[v.uuid]["mclk_pstate"][ps]["gtk_ent_f_obj"], False, False, 0)
                lbox.pack_start(devices[v.uuid]["mclk_pstate"][ps]["gtk_ent_f_obj_unit"], False, False, 0)
                lbox.pack_start(devices[v.uuid]["mclk_pstate"][ps]["gtk_ent_v_obj"], False, False, 0)
                lbox.pack_start(devices[v.uuid]["mclk_pstate"][ps]["gtk_ent_v_obj_unit"], False, False, 0)
                grid.attach(lbox, col, row, 1, 1)
                row += 1

            # Power Performance Mode Selection
            devices[v.uuid]["ppm"] = Gtk.Label()
            devices[v.uuid]["ppm"].set_markup("<b>Power Performance Modes:</b>")
            devices[v.uuid]["ppm"].set_property("margin-top", 1)
            devices[v.uuid]["ppm"].set_property("margin-bottom", 1)
            devices[v.uuid]["ppm"].set_property("margin-right", 2)
            devices[v.uuid]["ppm"].set_property("margin-left", 2)
            devices[v.uuid]["ppm"].set_alignment(0, 0.5)

            lbox = Gtk.Box(spacing=6)
            lbox.override_background_color(Gtk.StateType.NORMAL, Gdk.RGBA(.06,.06,.06,.06))
            lbox.set_property("margin-top", 1)
            lbox.set_property("margin-bottom", 1)
            lbox.set_property("margin-right", 1)
            lbox.set_property("margin-left", 1)
            lbox.pack_start(devices[v.uuid]["ppm"], True, True, 0)
            grid.attach(lbox, col, row, 1, 1)
            row += 1

            devices[v.uuid]["ppm_modes"] = Gtk.ListStore(int, str)
            devices[v.uuid]["ppm_mode_items"] = {}
            item_num = 0
            for mode_num, mode in v.ppm_modes.items():
                if mode_num == "NUM": continue
                devices[v.uuid]["ppm_modes"].append([int(mode_num), mode[0]])
                devices[v.uuid]["ppm_mode_items"][int(mode_num)] = item_num
                item_num += 1

            lbox = Gtk.Box(spacing=6)
            lbox.override_background_color(Gtk.StateType.NORMAL, Gdk.RGBA(.06,.06,.06,.06))
            lbox.set_property("margin-top", 1)
            lbox.set_property("margin-bottom", 1)
            lbox.set_property("margin-right", 1)
            lbox.set_property("margin-left", 1)

            devices[v.uuid]["ppm_modes_combo"] = Gtk.ComboBox.new_with_model_and_entry(devices[v.uuid]["ppm_modes"])
            devices[v.uuid]["ppm_modes_combo"].connect("changed", ppm_select, devices[v.uuid])
            devices[v.uuid]["ppm_modes_combo"].set_entry_text_column(1)
            #devices[v.uuid]["ppm_modes_combo"].set_active(devices[v.uuid]["ppm_mode_items"][v.get_current_ppm_mode()[0]])
            lbox.pack_start(devices[v.uuid]["ppm_modes_combo"], False, False, 0)
            grid.attach(lbox, col, row, 1, 1)
            row += 1

            # Save/Reset Card Buttons
            devices[v.uuid]["save_button"] = Gtk.Button("")
            for child in devices[v.uuid]["save_button"].get_children():
                child.set_label("<big><b>Save</b></big>")
                child.set_use_markup(True)
            devices[v.uuid]["save_button"].connect("clicked", self.save_card, gpu_list, devices, v.uuid)
            devices[v.uuid]["save_button"].set_property("width-request", 90)
    
            devices[v.uuid]["reset_button"] = Gtk.Button("")
            for child in devices[v.uuid]["reset_button"].get_children():
                child.set_label("<big><b>Reset</b></big>")
                child.set_use_markup(True)
            devices[v.uuid]["reset_button"].connect("clicked", self.reset_card, gpu_list, devices, v.uuid)
            devices[v.uuid]["reset_button"].set_property("width-request", 90)

            lbox = Gtk.Box(Gtk.Orientation.HORIZONTAL, spacing=6)
            lbox.set_homogeneous(False)
            lbox.override_background_color(Gtk.StateType.NORMAL, Gdk.RGBA(.06,.06,.06,.06))
            lbox.set_property("margin-top", 1)
            lbox.set_property("margin-bottom", 1)
            lbox.set_property("margin-right", 1)
            lbox.set_property("margin-left", 1)
            lbox.pack_start(devices[v.uuid]["save_button"], True, False, 0)
            lbox.pack_start(devices[v.uuid]["reset_button"], True, False, 0)
            grid.attach(lbox, col, row, 1, 1)
            row += 1
    
            # Increment column before going to next Device
            col += 1

        if num_com_amd_gpus > 1:
            # Save/Reset/Update ALL Card Buttons
            devices[v.uuid]["save_all_button"] = Gtk.Button("")
            for child in devices[v.uuid]["save_all_button"].get_children():
                child.set_label("<big><b>Save All</b></big>")
                child.set_use_markup(True)
            devices[v.uuid]["save_all_button"].connect("clicked", self.save_all_cards, gpu_list, devices, v.uuid)
            devices[v.uuid]["save_all_button"].set_property("width-request", 90)
    
            devices[v.uuid]["reset_all_button"] = Gtk.Button("")
            for child in devices[v.uuid]["reset_all_button"].get_children():
                child.set_label("<big><b>Reset All</b></big>")
                child.set_use_markup(True)
            devices[v.uuid]["reset_all_button"].connect("clicked", self.reset_all_cards, gpu_list, devices, v.uuid)
            devices[v.uuid]["reset_all_button"].set_property("width-request", 90)
    
            devices[v.uuid]["refresh_all_button"] = Gtk.Button("")
            for child in devices[v.uuid]["refresh_all_button"].get_children():
                child.set_label("<big><b>Refresh All</b></big>")
                child.set_use_markup(True)
            devices[v.uuid]["refresh_all_button"].connect("clicked", self.refresh_all_cards, gpu_list, devices, v.uuid)
            devices[v.uuid]["refresh_all_button"].set_property("width-request", 90)
    
            lbox = Gtk.Box(Gtk.Orientation.HORIZONTAL, spacing=6)
            #lbox.set_homogeneous(False)
            lbox.override_background_color(Gtk.StateType.NORMAL, Gdk.RGBA(.7,.7,.7,1.0))
            lbox.set_property("margin-top", 1)
            lbox.set_property("margin-bottom", 1)
            lbox.set_property("margin-right", 1)
            lbox.set_property("margin-left", 1)
            lbox.pack_start(devices[v.uuid]["save_all_button"], True, False, 0)
            lbox.pack_start(devices[v.uuid]["reset_all_button"], True, False, 0)
            lbox.pack_start(devices[v.uuid]["refresh_all_button"], True, False, 0)
            grid.attach(lbox, 0, row, col, 1)
            row += 1

        self.refresh_PAC(gpu_list, devices)

    def refresh_all_cards(self, parent, gpu_list, devices, uuid):
        self.refresh_PAC(gpu_list, devices)
        return

    def refresh_PAC(self, gpu_list, devices):
        gpu_list.read_hw_data()
        gpu_list.read_device_data()
        gpu_list.get_ppm_table()
        gpu_list.get_pstates()

        for k, v in gpu_list.list.items():
            devices[v.uuid]["power_cap_cur"].set_text("    Current: "+str(v.get_params_value("power_cap"))+"W    Set: ")
            devices[v.uuid]["power_cap_ent"].set_text(str(int(v.get_params_value("power_cap"))))
            for ps, psd in v.sclk_state.items():
                devices[v.uuid]["sclk_pstate"][ps]["gtk_cur_obj"].set_text("    "+(str(ps)+":  " + str(psd[0]) +", "+ str(psd[1])))
                item_value = re.sub(r'[a-z,A-Z]*', '', str(psd[0]))
                item_unit = re.sub(r'[0-9][.]*[0-9]*', '', str(psd[0]))
                devices[v.uuid]["sclk_pstate"][ps]["gtk_ent_f_obj"].set_text(item_value)
                devices[v.uuid]["sclk_pstate"][ps]["gtk_ent_f_obj_unit"].set_text(item_unit + "     ")
                item_value = re.sub(r'[a-z,A-Z]*', '', str(psd[1]))
                item_unit = re.sub(r'[0-9][.]*[0-9]*', '', str(psd[1]))
                devices[v.uuid]["sclk_pstate"][ps]["gtk_ent_v_obj"].set_text(str(item_value))
                devices[v.uuid]["sclk_pstate"][ps]["gtk_ent_v_obj_unit"].set_text(item_unit)
            for ps, psd in v.mclk_state.items():
                devices[v.uuid]["mclk_pstate"][ps]["gtk_cur_obj"].set_text("    "+(str(ps)+":  " + str(psd[0]) +", "+ str(psd[1])))
                item_value = re.sub(r'[a-z,A-Z]*', '', str(psd[0]))
                item_unit = re.sub(r'[0-9][.]*[0-9]*', '', str(psd[0]))
                devices[v.uuid]["mclk_pstate"][ps]["gtk_ent_f_obj"].set_text(item_value)
                devices[v.uuid]["mclk_pstate"][ps]["gtk_ent_f_obj_unit"].set_text(item_unit + "     ")
                item_value = re.sub(r'[a-z,A-Z]*', '', str(psd[1]))
                item_unit = re.sub(r'[0-9][.]*[0-9]*', '', str(psd[1]))
                devices[v.uuid]["mclk_pstate"][ps]["gtk_ent_v_obj"].set_text(str(item_value))
                devices[v.uuid]["mclk_pstate"][ps]["gtk_ent_v_obj_unit"].set_text(item_unit)
            # refresh active mode item
            devices[v.uuid]["ppm_modes_combo"].set_active(devices[v.uuid]["ppm_mode_items"][v.get_current_ppm_mode()[0]])
        return

    def save_all_cards(self, parent, gpu_list, devices, uuid):
        print("Currently doesn't work")
        for dk in devices.keys():
            self.save_card(parent, gpu_list, devices, dk, refresh=False)
        self.refresh_all_cards(parent, gpu_list, devices, uuid)
        return

    def save_card(self, parent, gpu_list, devices, uuid, refresh=True):
        # specify output batch file name
        out_filename = os.getcwd() + "/" + "pac_writer_" + str(uuid4().hex) + ".sh"
        fileptr = open(out_filename, 'x')
        # output header
        print("#!/bin/sh", file=fileptr)
        print("###########################################################################", file=fileptr)
        print("## amdgpu-pac generated script to modify GPU configuration/settings", file=fileptr)
        print("###########################################################################", file=fileptr)
        print("", file=fileptr)
        print("###########################################################################", file=fileptr)
        print("## WARNING - Do not execute this script without completely", file=fileptr)
        print("## understanding appropriate value to write to your specific GPUs", file=fileptr)
        print("###########################################################################", file=fileptr)
        print("#", file=fileptr)
        print("#    Copyright (C) 2019  RueiKe", file=fileptr)
        print("#", file=fileptr)
        print("#    This program is free software: you can redistribute it and/or modify", file=fileptr)
        print("#    it under the terms of the GNU General Public License as published by", file=fileptr)
        print("#    the Free Software Foundation, either version 3 of the License, or", file=fileptr)
        print("#    (at your option) any later version.", file=fileptr)
        print("#", file=fileptr)
        print("#    This program is distributed in the hope that it will be useful,", file=fileptr)
        print("#    but WITHOUT ANY WARRANTY; without even the implied warranty of", file=fileptr)
        print("#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the", file=fileptr)
        print("#    GNU General Public License for more details.", file=fileptr)
        print("#", file=fileptr)
        print("#    You should have received a copy of the GNU General Public License", file=fileptr)
        print("#    along with this program.  If not, see <https://www.gnu.org/licenses/>.", file=fileptr)
        print("###########################################################################", file=fileptr)
    
        v = gpu_list.list[uuid]
        print("# ", file=fileptr)
        print("# Card" + v.card_num + "  " + v.get_params_value("model"), file=fileptr)
        print("# " + v.card_path, file=fileptr)
        print("# ", file=fileptr)
        print("set -x", file=fileptr)
    
        # Power Cap
        power_cap_file = v.hwmon_path + "power1_cap"
        old_power_cap = int(v.get_params_value("power_cap"))
        new_power_cap = int(devices[uuid]["power_cap_ent"].get_text())
        print("# Powercap Old: ", str(old_power_cap), end="", file=fileptr)
        print(" New: ", str(new_power_cap), end="", file=fileptr)
        print(" Min: ", v.get_params_value("power_cap_min"), end="", file=fileptr)
        print(" Max: ", v.get_params_value("power_cap_max"), end="", file=fileptr)
        print("", file=fileptr)
    
        if new_power_cap == old_power_cap :
            print("# No changes, skipped", file=fileptr)
        else:
            if v.is_valid_power_cap(new_power_cap):
                print("sudo sh -c \"echo \'%d\' >  %s\"" % ((int(1000000*new_power_cap)), power_cap_file), file=fileptr)
            else:
                print("# Invalid paramater values", file=fileptr)
    
        # Sclk P-states
        device_file = v.card_path + "pp_od_clk_voltage"
        for pk, pv in devices[uuid]["sclk_pstate"].items():
            pstate = [pk, int(pv["gtk_ent_f_obj"].get_text()), int(pv["gtk_ent_v_obj"].get_text())]
            print("#sck p-state: %s : %s MHz, %s mV" % (pstate[0], pstate[1], pstate[2]), file=fileptr)
            if v.is_valid_sclk_pstate(pstate):
                print("sudo sh -c \"echo \'s %s %s %s\' >  %s\"" % (pstate[0], pstate[1], pstate[2], device_file), file=fileptr)
            else:
                print("# Invalid sclk pstate values", file=fileptr)
    
        # Mclk P-states
        device_file = v.card_path + "pp_od_clk_voltage"
        for pk, pv in devices[uuid]["mclk_pstate"].items():
            pstate = [pk, int(pv["gtk_ent_f_obj"].get_text()), int(pv["gtk_ent_v_obj"].get_text())]
            print("#mck p-state: %s : %s MHz, %s mV" % (pstate[0], pstate[1], pstate[2]), file=fileptr)
            if v.is_valid_mclk_pstate(pstate):
                print("sudo sh -c \"echo \'m %s %s %s\' >  %s\"" % (pstate[0], pstate[1], pstate[2], device_file), file=fileptr)
            else:
                print("# Invalid mclk pstate values", file=fileptr)
    
        # PPM
        ppm_mode_file = v.card_path + "power_dpm_force_performance_level"
        ppm_level_file = v.card_path + "pp_power_profile_mode"
    
        tree_iter = devices[uuid]["ppm_modes_combo"].get_active_iter()
        if tree_iter is not None:
            model = devices[uuid]["ppm_modes_combo"].get_model()
            row_id, name = model[tree_iter][:2]
            selected_mode = devices[uuid]["new_ppm"][0]
            print("# Selected: ID=%d, name=%s" % (devices[uuid]["new_ppm"][0], devices[uuid]["new_ppm"][1]), file=fileptr)
            if (devices[uuid]["new_ppm"][1]).lower() == 'auto':
                print("sudo sh -c \"echo \'auto\' >  %s\"" % ppm_mode_file, file=fileptr)
            else:
                print("sudo sh -c \"echo \'manual\' >  %s\"" % ppm_mode_file, file=fileptr)
                print("sudo sh -c \"echo \'%d\' >  %s\"" % (devices[uuid]["new_ppm"][0], ppm_level_file), file=fileptr)
    
        # Commit changes
        device_file = v.card_path + "pp_od_clk_voltage"
        print("sudo sh -c \"echo \'c\' >  %s\"" % (device_file), file=fileptr)
    
        # Close file and Set permissions and Execute it --execute_pac
        fileptr.close()
        os.chmod(out_filename, 0o744)
        print("Batch file completed: %s" % out_filename)
        if gut_const.execute_pac == True:
            print("Writing changes to GPU %s" % v.card_path)
            cmd = subprocess.Popen(out_filename, shell=True)
            cmd.wait()
            print("")
            if refresh == True: self.refresh_PAC(gpu_list, devices)
            os.remove(out_filename)
        else:
            print("Execute to write changes to GPU %s" % v.card_path)
            print("")
    
        return

    def reset_all_cards(self, parent, gpu_list, devices, uuid):
        for dk in devices.keys():
            self.reset_card(parent, gpu_list, devices, dk)
        return

    def reset_card(self, parent, gpu_list, devices, uuid):
        # specify output batch file name
        out_filename = os.getcwd() + "/" + "pac_reseter_" + str(uuid4().hex) + ".sh"
        fileptr = open(out_filename, 'x')
        # output header
        print("#!/bin/sh", file=fileptr)
        print("###########################################################################", file=fileptr)
        print("## amdgpu-pac generated script to modify GPU configuration/settings", file=fileptr)
        print("###########################################################################", file=fileptr)
        print("", file=fileptr)
        print("###########################################################################", file=fileptr)
        print("## WARNING - Do not execute this script without completely", file=fileptr)
        print("## understanding appropriate value to write to your specific GPUs", file=fileptr)
        print("###########################################################################", file=fileptr)
        print("#", file=fileptr)
        print("#    Copyright (C) 2019  RueiKe", file=fileptr)
        print("#", file=fileptr)
        print("#    This program is free software: you can redistribute it and/or modify", file=fileptr)
        print("#    it under the terms of the GNU General Public License as published by", file=fileptr)
        print("#    the Free Software Foundation, either version 3 of the License, or", file=fileptr)
        print("#    (at your option) any later version.", file=fileptr)
        print("#", file=fileptr)
        print("#    This program is distributed in the hope that it will be useful,", file=fileptr)
        print("#    but WITHOUT ANY WARRANTY; without even the implied warranty of", file=fileptr)
        print("#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the", file=fileptr)
        print("#    GNU General Public License for more details.", file=fileptr)
        print("#", file=fileptr)
        print("#    You should have received a copy of the GNU General Public License", file=fileptr)
        print("#    along with this program.  If not, see <https://www.gnu.org/licenses/>.", file=fileptr)
        print("###########################################################################", file=fileptr)
    
        v = gpu_list.list[uuid]
        print("# ", file=fileptr)
        print("# Card" + v.card_num + "  " + v.get_params_value("model"), file=fileptr)
        print("# " + v.card_path, file=fileptr)
        print("# ", file=fileptr)
        print("set -x", file=fileptr)
    
        # Commit changes
        power_cap_file = v.hwmon_path + "power1_cap"
        device_file = v.card_path + "pp_od_clk_voltage"
        ppm_mode_file = v.card_path + "power_dpm_force_performance_level"
        print("sudo sh -c \"echo \'0\' >  %s\"" % power_cap_file, file=fileptr)
        print("sudo sh -c \"echo \'auto\' >  %s\"" % ppm_mode_file, file=fileptr)
        print("sudo sh -c \"echo \'r\' >  %s\"" % (device_file), file=fileptr)
        print("sudo sh -c \"echo \'c\' >  %s\"" % (device_file), file=fileptr)
    
        # Close file and Set permissions and Execute it --execute_pac
        fileptr.close()
        os.chmod(out_filename, 0o744)
        print("Batch file completed: %s" % out_filename)
        if gut_const.execute_pac == True:
            print("Writing changes to GPU %s" % v.card_path)
            cmd = subprocess.Popen(out_filename, shell=True)
            cmd.wait()
            print("")
            self.refresh_PAC(gpu_list, devices)
            os.remove(out_filename)
        else:
            print("Execute to write changes to GPU %s" % v.card_path)
            print("")

        return

def ppm_select(self, device):
    tree_iter = device["ppm_modes_combo"].get_active_iter()
    if tree_iter is not None:
        model = device["ppm_modes_combo"].get_model()
        row_id, name = model[tree_iter][:2]
        device["new_ppm"] = [row_id, name]
        #print("Selected: ID=%d, name=%s" % (device["new_ppm"][0], device["new_ppm"][1]))
    return


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("--about", help="README", action="store_true", default=False)
    parser.add_argument("--execute_pac", help="execute pac bash script without review", action="store_true", default=False)
    parser.add_argument("-d", "--debug", help="Debug output", action="store_true", default=False)
    args = parser.parse_args()

    # About me
    if args.about == True :  
        print(__doc__ )
        print("Author: ", __author__ )
        print("Copyright: ", __copyright__)
        print("Credits: ", __credits__)
        print("License: ", __license__)
        print("Version: ", __version__)
        print("Maintainer: ", __maintainer__)
        print("Status: ", __status__)
        sys.exit(0)

    gut_const.PATH = os.path.dirname(str(Path(__file__).resolve()))
    if args.debug == True :  gut_const.DEBUG = True
    if args.execute_pac == True :  gut_const.execute_pac = True

    if gut_const.check_env() < 0:
        print("Error in environment. Exiting...")
        sys.exit(-1)

    # Check value of AMD Feature mask
    try:
        featuremask = gut_const.read_amdfeaturemask()
    except FileNotFoundError:
        print("Cannot read ppfeaturemask. Exiting...")
        sys.exit(-1)
    if featuremask == int(0xffff7fff) or featuremask == int(0xffffffff) :
        print("AMD Wattman features enabled: %s" % hex(featuremask))
    else:
        print("AMD Wattman features not enabled: %s, See README file." % hex(featuremask))
        sys.exit(-1)

    gut_const.get_amd_driver_version()

    gpu_list = GPU.GPU_LIST()
    gpu_list.get_gpu_list()
    num_amd_gpus = gpu_list.num_gpus()

    if num_amd_gpus == 0:
        print("No AMD GPUs detected, exiting...")
        sys.exit(-1)
    else:
        print(f"{num_amd_gpus} AMD GPUs detected")

    # Get GPU info
    gpu_list.read_hw_data()
    gpu_list.read_device_data()
    gpu_list.get_gpu_details()
    gpu_list.get_pstates()
    gpu_list.get_ppm_table()


    num_com_amd_gpus = gpu_list.num_compatible_gpus()
    if num_com_amd_gpus == 0:
        print("None are compatible, exiting...")
        #sys.exit(-1)
    else:
        print(f"{num_amd_gpus} are compatible")
        print("")

    print("WARNING: Under Deveopment")
    print("WARNING: Works but not fully tested!")
    print()

    # Display Gtk style Monitor
    devices = {}
    gmonitor = PACWindow(gpu_list, devices)
    gmonitor.connect("delete-event", Gtk.main_quit)
    gmonitor.show_all()

    Gtk.main()


if __name__ == "__main__":
    main()
