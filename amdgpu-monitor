#!/usr/bin/env python3
"""amdgpu-monitor  -  Displays current status of all active GPUs

    A utility to give the current state of all compatible AMD GPUs. The default behavior
    is to continuously update a text based table in the current window unitl Ctrl-C is
    pressed.  With the *--gui* option, a table of relevant parameters will be
    updated in a Gtk window.  You can specify the delay between updates with the
    *--sleep N* option where N is an integer > zero that specifies the number of seconds
    to sleep.

    Copyright (C) 2019  RueiKe

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.
"""
__author__ = "RueiKe"
__copyright__ = "Copyright (C) 2019 RueiKe"
__credits__ = []
__license__ = "GNU General Public License"
__program_name__ = "amdgpu-monitor"
__version__ = "v2.1.0"
__maintainer__ = "RueiKe"
__status__ = "Development"

import gi
gi.require_version("Gtk", "3.0")
from gi.repository import GLib, Gtk, Gdk
import argparse
import re
import subprocess
import threading
import os
import platform
import sys
import time
from GPUmodules import GPUmodules as GPU
from GPUmodules import env
from datetime import datetime
from uuid import uuid4
import glob 
import shutil 
from pathlib import Path


class MonitorWindow(Gtk.Window):
    def __init__(self, gpu_list, devices):
        Gtk.Window.__init__(self, title="amdgpu-monitor")
        self.set_border_width(1)
        if(os.path.isfile(env.gut_const.PATH + '/amdgpu-monitor.icon.png') == True):
            self.set_icon_from_file(env.gut_const.PATH + '/amdgpu-monitor.icon.png')
        grid = Gtk.Grid()
        grid.override_background_color(Gtk.StateType.NORMAL, Gdk.RGBA(1,1,1,1))
        self.add(grid)

        col = 0
        row_labels = {"card_num": Gtk.Label()}
        row_labels["card_num"].set_markup("<b>Card #</b>")
        for k, v in gpu_list.table_param_labels.items():
            row_labels[k] = Gtk.Label()
            row_labels[k].set_markup("<b>"+str(v)+"</b>")
        i=0
        for k, v in row_labels.items():
            lbox = Gtk.Box(spacing=6)
            lbox.override_background_color(Gtk.StateType.NORMAL, Gdk.RGBA(.06,.06,.06,.06))
            lbox.set_property("margin-top", 1)
            lbox.set_property("margin-bottom", 1)
            lbox.set_property("margin-right", 1)
            lbox.set_property("margin-left", 1)
            v.set_property("margin-top", 1)
            v.set_property("margin-bottom", 1)
            v.set_property("margin-right", 4)
            v.set_property("margin-left", 4)
            lbox.pack_start(v, True, True, 0)
            grid.attach(lbox, col, i, 1, 1)
            v.set_alignment(0, 0.5)
            i += 1
        for k, v in gpu_list.list.items():
            devices[v.uuid] = {"card_num":  Gtk.Label(label="card"+v.get_params_value("card_num"))}
            for cv in gpu_list.table_param_labels:
                devices[v.uuid][cv] = Gtk.Label(label=v.get_params_value(str(cv)))
                devices[v.uuid][cv].set_width_chars(10)

        for dk, dv in devices.items():
            col += 1
            i = 0
            for lk, lv in dv.items():
                lbox = Gtk.Box(spacing=6)
                lbox.override_background_color(Gtk.StateType.NORMAL, Gdk.RGBA(.06,.06,.06,.06))
                lbox.set_property("margin-top", 1)
                lbox.set_property("margin-bottom", 1)
                lbox.set_property("margin-right", 1)
                lbox.set_property("margin-left", 1)
                lv.set_property("margin-top", 1)
                lv.set_property("margin-bottom", 1)
                lv.set_property("margin-right", 3)
                lv.set_property("margin-left", 3)
                lbox.pack_start(lv, True, True, 0)
                grid.attach(lbox, col, i, 1, 1)
                i += 1


def updateData(gpu_list, devices):
    gpu_list.read_hw_data()
    gpu_list.read_device_data()
    for dk, dv in devices.items():
        for lk, lv in dv.items():
            if lk == "card_num":
                data_value = "card"+gpu_list.list[dk].get_params_value("card_num")
            else:
                data_value = str(gpu_list.list[dk].get_params_value(lk))
            lv.set_text(data_value)
            lv.set_width_chars(16)

def refresh(refreshtime, updateData, gpu_list, devices):
    while True:
        GLib.idle_add(updateData, gpu_list, devices)
        time.sleep(refreshtime)


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("--about", help="README", action="store_true", default=False)
    parser.add_argument("--gui", help="Display GTK Version of Monitor", action="store_true", default=False)
    parser.add_argument("--sleep", help="Number of seconds to sleep between updates", type=int, default=2)
    parser.add_argument("--no_fan", help="don't include fan setting options", action="store_true", default=False)
    parser.add_argument("-d", "--debug", help="Debug output", action="store_true", default=False)
    args = parser.parse_args()


    # About me
    if args.about == True :  
        print(__doc__ )
        print("Author: ", __author__ )
        print("Copyright: ", __copyright__)
        print("Credits: ", __credits__)
        print("License: ", __license__)
        print("Version: ", __version__)
        print("Maintainer: ", __maintainer__)
        print("Status: ", __status__)
        sys.exit(0)

    env.gut_const.PATH = os.path.dirname(str(Path(__file__).resolve()))
    env.gut_const.DEBUG = args.debug
    if args.no_fan == True: env.gut_const.show_fans = False
    if int(args.sleep) > 0 :
        env.gut_const.SLEEP = int(args.sleep)
    else:
        print("Invalid value for sleep specified.  Must be an integer great than zero")
        sys.exit(-1)

    if env.gut_const.check_env() < 0:
        print("Error in environment. Exiting...")
        sys.exit(-1)

    # Check value of AMD Feature mask
    try:
        featuremask = env.gut_const.read_amdfeaturemask()
    except FileNotFoundError:
        print("Cannot read ppfeaturemask. Exiting...")
        sys.exit(-1)
    if featuremask == int(0xffff7fff) or featuremask == int(0xffffffff) :
        print("AMD Wattman features enabled: %s" % hex(featuremask))
    else:
        print("AMD Wattman features not enabled: %s, See README file." % hex(featuremask))
        sys.exit(-1)

    env.gut_const.get_amd_driver_version()

    gpu_list = GPU.GPU_LIST()
    gpu_list.get_gpu_list()
    num_amd_gpus = gpu_list.num_gpus()

    if num_amd_gpus == 0:
        print("No AMD GPUs detected, exiting...")
        sys.exit(-1)
    else:
        print(f"{num_amd_gpus} AMD GPUs detected")
    gpu_list.read_hw_data()
    gpu_list.read_device_data()
    gpu_list.get_gpu_details()

    num_com_amd_gpus = gpu_list.num_compatible_gpus()
    if num_com_amd_gpus == 0:
        print("None are Compatible, exiting...")
        #sys.exit(-1)
    else:
        print(f"{num_amd_gpus} are Compatible")
        print("")

    if args.gui == True:
        # Display Gtk style Monitor
        devices = {}
        gmonitor = MonitorWindow(gpu_list, devices)
        gmonitor.connect("delete-event", Gtk.main_quit)
        gmonitor.show_all()

        # Start thread to update Monitor
        monthread = threading.Thread(target=refresh, daemon=True, args=[env.gut_const.SLEEP, updateData, gpu_list, devices]).start()

        Gtk.main()
    else:
        # Display text style Monitor
        try:
            while True:
                gpu_list.read_hw_data()
                gpu_list.read_device_data()
                if env.gut_const.DEBUG == False: os.system('clear')
                gpu_list.print_table()
                time.sleep(env.gut_const.SLEEP)
        except KeyboardInterrupt:
            sys.exit(0)


if __name__ == "__main__":
    main()
