#!/usr/bin/env python3
"""amdgpu-plot  -  Plot GPU parameter curves

    A utility to plot GPU curves

    Copyright (C) 2019  RueiKe

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.
"""
__author__ = "RueiKe"
__copyright__ = "Copyright (C) 2019 RueiKe"
__credits__ = []
__license__ = "GNU General Public License"
__program_name__ = "amdgpu-plot"
__version__ = "v2.4.1"
__maintainer__ = "RueiKe"
__status__ = "Development"

from matplotlib.ticker import AutoLocator
from matplotlib.backends.backend_gtk3cairo import FigureCanvasGTK3Cairo as FigureCanvas
from matplotlib.figure import Figure
import matplotlib.pyplot as plt
try:
    import pandas as pd
except:
    print("Pandas is required for %s", __program_name__)
    print("Use \"sudo apt-get install python3-pandas\" to install")
    sys.exit(0)
import numpy as np
import gi
gi.require_version("Gtk", "3.0")
from gi.repository import GLib, Gtk, Gdk
import argparse
import re
import subprocess
import threading
import signal
import os
import platform
import sys
import csv
import time
from GPUmodules import env
from datetime import datetime
import glob 
import shutil 
from pathlib import Path

pd_sem = threading.Semaphore()


def hex_to_rgba(value):
    value = value.lstrip('#')
    if len(value) == 3:
        value = ''.join([v*2 for v in list(value)])
    (r1,g1,b1,a1)=tuple(int(value[i:i+2], 16) for i in range(0, 6, 2))+(1,) 
    (r1,g1,b1,a1)=(r1/255.00000,g1/255.00000,b1/255.00000,a1)

    return (r1,g1,b1,a1)

def get_stack_size():
    """Get stack size for caller's frame.

       Code copied from Stack Overflow
    """
    size = 2  # current frame and caller's frame always exist
    while True:
        try:
            sys._getframe(size)
            size += 1
        except ValueError:
            return size - 1  # subtract current frame

class PlotData:
    def __init__(self):
        self.df = pd.DataFrame()
        self.length = 300
        self.quit = False
        self.writer = False
        self.reader = False
        self.consec_writer = 0
        self.consec_reader = 0
        self.gpu_list = ""
        self.num_gpus = 0

    def get_plot_data(self):
        # get deep copy of plot data df
        self.reader = True
        while(self.writer):
            if env.gut_const.DEBUG: print("wait for writer to finish")
            time.sleep(0.05)
        ndf = self.df.copy()
        self.reader = False
        return(ndf)

    def active_reader(self):
        return(self.reader)

    def wait_to_read(self):
        self.reader = True
        i = 0
        while(self.writer):
            if i < 10:
                if env.gut_const.DEBUG: print("wait for writer to finish")
                time.sleep(0.35)
                i += 1
            else:
                if env.gut_const.DEBUG: print("reseting writer")
                self.writer = False
        self.reader = True
        return(True)

    def finish_read(self):
        self.reader = False

    def wait_to_write(self):
        self.writer = True
        i = 0
        while(self.reader):
            if i < 10:
                if env.gut_const.DEBUG: print("wait for reader to finish")
                time.sleep(0.21)
                i += 1
            else:
                if env.gut_const.DEBUG: print("reseting reader")
                self.reader = False
                time.sleep(0.5)
        self.writer = True
        return(True)

    def finish_write(self):
        self.writer = False

    def kill_thread(self):
        self.reader = False
        self.quit = True
        print("Stopping reader thread")
        time.sleep(0.2)

class GuiComponents:
    def __init__(self, plot_data):
        self.updating = False
        self.gpu_list = plot_data.gpu_list
        self.num_gpus = plot_data.num_gpus
        self.gui_components = {}
        self.gpu_color = {}
        self.colors = {'plotface':'#404040', 'figface':'#909090', 'sclk_f':'#BED661', 'mclk_f':'#89E894',
                'loading':'#1E90FF', 'power':'#E12B06', 'power_cap':'#800000', 'vddgfx':'#778899', 'temp':'#E0E0E0'}
        self.font_colors = {'plotface':'#000000', 'figface':'#000000', 'sclk_f':'#000000', 'mclk_f':'#000000',
                'loading':'#FFFFFF', 'power':'#FFFFFF', 'power_cap':'#FFFFFF', 'vddgfx':'#000000', 'temp':'#000000'}
        gpu_color_list = ['#B52735', '#EBB035', '#06A2CB', '#218559', '#D0C6B1', '#E18A07', '#336688', '#7C821E']
        plot_item_list = ['loading', 'power', 'power_cap', 'temp', 'vddgfx', 'sclk_f', 'mclk_f']

        #header:  ['Time', 'Card#', 'model_display', 'loading', 'power', 'power_cap', 'energy', 'temp', 'vddgfx',
        #'fan_pwm', 'sclk_f', 'sclk_ps', 'mclk_f', 'mclk_ps', 'ppm']
        self.plot_items = {'loading':True, 'power':True, 'power_cap':True,
                'temp':True, 'vddgfx':True,'sclk_f':True, 'mclk_f':True}

        self.gui_components["info_bar"] = {}
        self.gui_components["legend"] = {}
        self.gui_components["legend"]["buttons"] = {}
        self.gui_components["legend"]["plot_items"] = {}
        for plotitem in plot_item_list:
            self.gui_components["legend"]["plot_items"][plotitem] = True
        self.gui_components["sclk_pstate_status"] = {}
        self.gui_components["sclk_pstate_status"]["df_name"] = 'sclk_ps'
        self.gui_components["mclk_pstate_status"] = {}
        self.gui_components["mclk_pstate_status"]["df_name"] = 'mclk_ps'
        self.gui_components["temp_status"] = {}
        self.gui_components["temp_status"]["df_name"] = 'temp'
        self.gui_components["card_plots"] = {}
        for i, gpu in enumerate(self.gpu_list):
            self.gui_components["card_plots"][gpu] = {}
            self.gui_components["card_plots"][gpu]['color'] = gpu_color_list[i]
            self.gpu_color[gpu] = gpu_color_list[i]
        return


class GPUPlotWindow(Gtk.Window):
    def __init__(self, gc, plot_data):
        gc.updating = True
        box_sapcing_val = 5
        num_bar_plots = 3
        def_gp_y_size = 200
        def_gp_x_size = 600
        def_bp_y_size = 200
        def_bp_x_size = 250
        def_lab_y_size = 28
        if gc.num_gpus > num_bar_plots:
            tot_y_size = gc.num_gpus * (def_gp_y_size + def_lab_y_size)
            gp_y_size = def_gp_y_size
            bp_y_size = (tot_y_size - (num_bar_plots * def_lab_y_size))/num_bar_plots
        elif gc.num_gpus < num_bar_plots:
            tot_y_size = num_bar_plots * (def_bp_y_size + def_lab_y_size)
            bp_y_size = def_bp_y_size
            gp_y_size = (tot_y_size - (gc.num_gpus * def_lab_y_size))/gc.num_gpus
        else:
            gp_y_size = def_gp_y_size
            bp_y_size = def_bp_y_size


        Gtk.Window.__init__(self, title="amdgpu-plot")
        self.set_border_width(1)
        icon_file = os.path.join(env.gut_const.PATH, "icons", "amdgpu-monitor.icon.png")
        if(os.path.isfile(icon_file) == True):
            self.set_icon_from_file(icon_file)
        #self.set_default_size(1000, 100*num_gpus)
        grid = Gtk.Grid()
        grid.override_background_color(Gtk.StateType.NORMAL, Gdk.RGBA(0.7,0.7,0.7,1))
        self.add(grid)


        # Get deep copy of current df
        ldf = plot_data.get_plot_data()

        row = 0
        # Top Bar - Energy
        gc.gui_components["info_bar"]["gtk_obj"] = Gtk.Label()
        gc.gui_components["info_bar"]["gtk_obj"].set_markup("<big><b>" + "amdgpu-util Plot" + "</b>" + "</big>")
        gc.gui_components["info_bar"]["gtk_obj"].override_color(Gtk.StateFlags.NORMAL, Gdk.RGBA(1.0, 1.0, 1.0, 1.0))
        gc.gui_components["info_bar"]["gtk_obj"].set_property("margin-top", 1)
        gc.gui_components["info_bar"]["gtk_obj"].set_property("margin-bottom", 1)
        gc.gui_components["info_bar"]["gtk_obj"].set_property("margin-right", 4)
        gc.gui_components["info_bar"]["gtk_obj"].set_property("margin-left", 4)
        gc.gui_components["info_bar"]["gtk_obj"].set_alignment(0.5, 0.5)
        lbox = Gtk.Box(spacing=box_sapcing_val)
        lbox.override_background_color(Gtk.StateType.NORMAL, Gdk.RGBA(.20,.40,.60,1.0))
        lbox.set_property("margin-top", 1)
        lbox.set_property("margin-bottom", 1)
        lbox.set_property("margin-right", 1)
        lbox.set_property("margin-left", 1)
        lbox.pack_start(gc.gui_components["info_bar"]["gtk_obj"], True, True, 0)
        grid.attach(lbox, 1, row, 4, 1)
        row += 1

        # Legend
        gc.gui_components["legend"]["gtk_obj"] = Gtk.Label()
        gc.gui_components["legend"]["gtk_obj"].set_markup("<big><b>" + "Plot Items" + "</b>" + "</big>")
        gc.gui_components["legend"]["gtk_obj"].override_color(Gtk.StateFlags.NORMAL, Gdk.RGBA(1.0, 1.0, 1.0, 1.0))
        gc.gui_components["legend"]["gtk_obj"].set_property("margin-top", 1)
        gc.gui_components["legend"]["gtk_obj"].set_property("margin-bottom", 1)
        gc.gui_components["legend"]["gtk_obj"].set_property("margin-right", 4)
        gc.gui_components["legend"]["gtk_obj"].set_property("margin-left", 4)
        gc.gui_components["legend"]["gtk_obj"].set_alignment(0.5, 0.5)
        lbox = Gtk.Box(spacing=box_sapcing_val)
        lbox.override_background_color(Gtk.StateType.NORMAL, Gdk.RGBA(.40,.40,.40,1.0))
        lbox.set_property("margin-top", 1)
        lbox.set_property("margin-bottom", 1)
        lbox.set_property("margin-right", 1)
        lbox.set_property("margin-left", 1)
        lbox.pack_start(gc.gui_components["legend"]["gtk_obj"], True, True, 0)
        for k,v in gc.gui_components["legend"]["plot_items"].items():
            but_color = hex_to_rgba(gc.colors[k])
            but_font_color = hex_to_rgba(gc.font_colors[k])
            gc.gui_components["legend"]["buttons"][k] = Gtk.Button("")
            for child in gc.gui_components["legend"]["buttons"][k].get_children():
                child.set_label("<big><b>" + k + "</b></big>")
                child.set_use_markup(True)
                child.override_color(Gtk.StateFlags.NORMAL,
                    Gdk.RGBA(but_font_color[0], but_font_color[1], but_font_color[2], but_font_color[3]))
                child.override_background_color(Gtk.StateFlags.NORMAL,
                    Gdk.RGBA(but_color[0], but_color[1], but_color[2], but_color[3]))
            gc.gui_components["legend"]["buttons"][k].override_color(Gtk.StateFlags.NORMAL,
                Gdk.RGBA(but_font_color[0], but_font_color[1], but_font_color[2], but_font_color[3]))
            gc.gui_components["legend"]["buttons"][k].override_background_color(Gtk.StateFlags.NORMAL,
                Gdk.RGBA(but_color[0], but_color[1], but_color[2], but_color[3]))
            gc.gui_components["legend"]["buttons"][k].connect("clicked", self.toggle_plot_item, gc, k)
            gc.gui_components["legend"]["buttons"][k].set_property("width-request", 90)
            gc.gui_components["legend"]["buttons"][k].set_property("margin-top", 1)
            gc.gui_components["legend"]["buttons"][k].set_property("margin-bottom", 1)
            gc.gui_components["legend"]["buttons"][k].set_property("margin-right", 1)
            gc.gui_components["legend"]["buttons"][k].set_property("margin-left", 1)
            lbox.pack_start(gc.gui_components["legend"]["buttons"][k], True, True, 0)
        grid.attach(lbox, 1, row, 4, 1)
        row += 1
        main_last_row = row

        # Set up bar plots
        grid_bar = Gtk.Grid()
        grid_bar.override_background_color(Gtk.StateType.NORMAL, Gdk.RGBA(0.7,0.7,0.7,1))
        grid.attach(grid_bar, 1, main_last_row, 1, 1)
        brow = 0
        fig_num=0
        #plot_top_row = row
        for v in [gc.gui_components["sclk_pstate_status"], gc.gui_components["mclk_pstate_status"], gc.gui_components["temp_status"]]:

            # Add Bar Plots Titles
            v["title_obj"] = Gtk.Label()
            v["title_obj"].set_markup("<big><b>Card " + v["df_name"] + "</b>" + "</big>")
            v["title_obj"].override_color(Gtk.StateFlags.NORMAL, Gdk.RGBA(1.0, 1.0, 1.0, 1.0))
            v["title_obj"].set_property("margin-top", 1)
            v["title_obj"].set_property("margin-bottom", 1)
            v["title_obj"].set_property("margin-right", 4)
            v["title_obj"].set_property("margin-left", 4)
            v["title_obj"].set_alignment(0.5, 0.5)
            lbox = Gtk.Box(spacing=box_sapcing_val)
            lbox.override_background_color(Gtk.StateType.NORMAL, Gdk.RGBA(.20,.40,.60,1.0))
            lbox.set_property("margin-top", 1)
            lbox.set_property("margin-bottom", 1)
            lbox.set_property("margin-right", 1)
            lbox.set_property("margin-left", 1)
            lbox.pack_start(v["title_obj"], True, True, 0)

            grid_bar.attach(lbox, 1, brow, 1, 1)
            brow += 1

            # Add Bar Plots
            # Set up plot figure and canvas
            v["figure_num"] = 100 + fig_num
            fig_num += 1
            v["figure"], v["ax1"]  = plt.subplots(num=v["figure_num"])
            v["figure"].set_facecolor(gc.colors["figface"])

            plt.figure(v["figure_num"])
            plt.subplots_adjust(left=0.13, right=0.97, top=0.97, bottom=0.1)
            v["ax1"].set_facecolor(gc.colors["plotface"])
            if v["df_name"] == "temp": plt.yticks(np.arange(20,91,10))
            else: plt.yticks(np.arange(0,9,1))

            v["canvas"] = FigureCanvas(v["figure"])  # a Gtk.DrawingArea
            v["canvas"].set_size_request(def_bp_x_size, bp_y_size)

            lbox = Gtk.Box(spacing=box_sapcing_val)
            lbox.override_background_color(Gtk.StateType.NORMAL, Gdk.RGBA(0.5,0.5,0.5,1.0))
            lbox.set_property("margin-top", 1)
            lbox.set_property("margin-bottom", 1)
            lbox.set_property("margin-right", 1)
            lbox.set_property("margin-left", 1)
            lbox.pack_start(v["canvas"], True, True, 0)

            grid_bar.attach(lbox, 1, brow, 1, 1)
            brow += 1

        # Set up gpu plots
        grid_plot = Gtk.Grid()
        grid_plot.override_background_color(Gtk.StateType.NORMAL, Gdk.RGBA(0.7,0.7,0.7,1))
        grid.attach(grid_plot, 2, main_last_row, 3, 1)
        prow = 0
        #row = plot_top_row
        for k,v in gc.gui_components["card_plots"].items():
            data_val = ldf[ldf["Card#"].isin([k])]["energy"].iloc[-1]
            model_val = ldf[ldf["Card#"].isin([k])]["model_display"].iloc[-1]
            # Add GPU Plots Titles
            v["title_obj"] = Gtk.Label()
            v["title_obj"].set_markup("<big><b>Card   " + str(k) +"    "+ str(model_val) +
                    "    Energy:  " + str(data_val) + "</b>" + "</big>")
            v["title_obj"].override_color(Gtk.StateFlags.NORMAL, Gdk.RGBA(1.0, 1.0, 1.0, 1.0))
            v["title_obj"].set_property("margin-top", 1)
            v["title_obj"].set_property("margin-bottom", 1)
            v["title_obj"].set_property("margin-right", 4)
            v["title_obj"].set_property("margin-left", 4)
            v["title_obj"].set_alignment(0.5, 0.5)
            lbox = Gtk.Box(spacing=box_sapcing_val)
            rgba_col = hex_to_rgba(v["color"])
            lbox.override_background_color(Gtk.StateType.NORMAL, Gdk.RGBA(rgba_col[0], rgba_col[1], rgba_col[2],rgba_col[3]))
            lbox.set_property("margin-top", 1)
            lbox.set_property("margin-bottom", 1)
            lbox.set_property("margin-right", 1)
            lbox.set_property("margin-left", 1)
            lbox.pack_start(v["title_obj"], True, True, 0)

            grid_plot.attach(lbox, 1, prow, 1, 1)
            prow += 1

            # Add GPU Plots
            # Set up plot figure and canvas
            v["figure_num"] = 500 + k
            v["figure"], v["ax1"] = plt.subplots(num=v["figure_num"])
            v["figure"].set_facecolor(gc.colors["figface"])

            plt.figure(v["figure_num"])
            plt.subplots_adjust(left=0.1, right=0.9, top=0.97, bottom=0.03)
            v["ax1"].set_facecolor(gc.colors["plotface"])
            v["ax1"].set_xticks([])
            v["ax1"].set_yticks(np.arange(0,250,20))
            v["ax1"].tick_params(axis='y', which='major', labelsize=8)
            v["ax2"] = v["ax1"].twinx()
            v["ax2"].set_xticks([])
            v["ax2"].set_yticks(np.arange(500,1500,100))
            v["ax2"].tick_params(axis='y', which='major', labelsize=8)

            v["canvas"] = FigureCanvas(v["figure"])  # a Gtk.DrawingArea
            v["canvas"].set_size_request(def_gp_x_size, gp_y_size)


            lbox = Gtk.Box(spacing=box_sapcing_val)
            lbox.override_background_color(Gtk.StateType.NORMAL, Gdk.RGBA(1,1,1,1.0))
            lbox.set_property("margin-top", 1)
            lbox.set_property("margin-bottom", 1)
            lbox.set_property("margin-right", 1)
            lbox.set_property("margin-left", 1)
            lbox.pack_start(v["canvas"], True, True, 0)

            grid_plot.attach(lbox, 1, prow, 1, 1)
            prow += 1
        gc.updating = False

    def toggle_plot_item(self, parent, gc, k):
        if gc.plot_items[k] == True:
            gc.plot_items[k] = False
        else:
            gc.plot_items[k] = True


def updateData(gc, plot_data):
    #this should just get the latest from df for plot updates
    if gc.updating:
        if env.gut_const.DEBUG: print("Skipping recursive update")
        print("Skipping recursive update")
        time.sleep(0.05)
        return
    ########################
    gc.updating = True
    plot_data.wait_to_read()
    pd_sem.acquire()
    ########################
    ldf = plot_data.df
    try:
        # Update Bar Plots
        for v in [gc.gui_components["sclk_pstate_status"], gc.gui_components["mclk_pstate_status"], gc.gui_components["temp_status"]]:
            data_val = []
            label_val = []
            bar_col = []
            # Set Plot Parameters
            for k in plot_data.gpu_list:
                l, d = ldf[ldf["Card#"].isin([k])][["Card#", v['df_name']]].iloc[-1]
                label_val.append(int(l))
                data_val.append(float(d))
                bar_col.append(gc.gpu_color[l])
            ind = np.arange(gc.num_gpus)  # the x locations for the groups
            width = 0.65       # the width of the bars
    
            # Do bar plot
            plt.figure(v["figure_num"])
            v["ax1"].clear()
            rects1 = v["ax1"].bar(ind, data_val, width, color=bar_col, tick_label=label_val)
            if v["df_name"] == "temp":
                for a, b in zip(ind, data_val):
                    v["ax1"].text(x=float(a)-(float(width)/2.0), y=0.90*b, s=' '+str(b), fontsize=8)
                plt.ylim((20,91))
                #v["ax1"].set_ylabel('Temp (C)', color='k')
            else:
                data_val = list(map(int, data_val))
                for a, b in zip(ind, data_val):
                    v["ax1"].text(x=a-width/4.0, y=b-width, s=str(b), fontsize=10)
                plt.ylim((0,8))
                #v["ax1"].set_ylabel('P-State', color='k')
            v["canvas"].draw()
            v["canvas"].flush_events()
        # Update GPU Plots
        for k,v in gc.gui_components["card_plots"].items():
            data_val = ldf[ldf["Card#"].isin([k])]["energy"].iloc[-1]
            model_val = ldf[ldf["Card#"].isin([k])]["model_display"].iloc[-1]
            v["title_obj"].set_markup("<big><b>Card   " + str(k) +"    "+ str(model_val) +
                    "    Energy:  " + str(data_val) + "</b>" + "</big>")
    
            # Plot GPUs
            plt.figure(v["figure_num"])
            v["ax1"].clear()
            v["ax1"].set_ylabel('Loading/Power/Temp', color='k', fontsize=10)
            for plot_item in ['loading', 'power_cap', 'power', 'temp']:
                if gc.plot_items[plot_item] == True:
                    v["ax1"].plot(ldf[ldf["Card#"].isin([k])].loc[:,['Time']],
                            ldf[ldf["Card#"].isin([k])].loc[:,[plot_item]],
                            color=gc.colors[plot_item], linewidth=0.5)
                    v["ax1"].text(x=ldf[ldf["Card#"].isin([k])].loc[:,['Time']].iloc[-1],
                            y=ldf[ldf["Card#"].isin([k])].loc[:,[plot_item]].iloc[-1],
                            s=str(int(ldf[ldf["Card#"].isin([k])].loc[:,[plot_item]].iloc[-1].values[0])),
                            bbox = dict(boxstyle="round,pad=0.2", facecolor=gc.colors[plot_item]), fontsize=6)
    
            v["ax2"].clear()
            v["ax2"].set_ylabel('MHz/mV', color='k', fontsize=10)
            for plot_item in ['vddgfx', 'sclk_f', 'mclk_f']:
                if gc.plot_items[plot_item] == True:
                    v["ax2"].plot(ldf[ldf["Card#"].isin([k])].loc[:,['Time']],
                            ldf[ldf["Card#"].isin([k])].loc[:,[plot_item]],
                            color=gc.colors[plot_item], linewidth=0.5)
                    v["ax2"].text(x=ldf[ldf["Card#"].isin([k])].loc[:,['Time']].iloc[-1],
                            y=ldf[ldf["Card#"].isin([k])].loc[:,[plot_item]].iloc[-1],
                            s=str(int(ldf[ldf["Card#"].isin([k])].loc[:,[plot_item]].iloc[-1].values[0])),
                            bbox = dict(boxstyle="round,pad=0.2", facecolor=gc.colors[plot_item]), fontsize=6)
    
            v["canvas"].draw()
            v["canvas"].flush_events()
    except:
        print("matplotlib error, stack size is %d" % get_stack_size())
        plot_data.kill_thread()
    ########################
    pd_sem.release()
    plot_data.finish_read()
    gc.updating = False
    ########################


def read_from_stdin(refreshtime, plot_data):
    #this should continuously from from stdin and populate df
    #read with pandas
    header = True
    sync_add = 0
    while (plot_data.quit == False):
        #########################
        # Call wait_to_write ####
        pd_sem.acquire()
        plot_data.wait_to_write()
        #########################
        rdf = pd.DataFrame()
        ndf = pd.DataFrame()
        if plot_data.num_gpus ==0: num_gpus = 1
        else: num_gpus = plot_data.num_gpus

        # Process a set of GPUs at a time
        for gpu_index in range(0, num_gpus + sync_add):
            line = sys.stdin.readline()
            if line == "":
                print("Error: Null input line")
                time.sleep(0.1)
                continue
            if header:
                header_item = list(line.strip().split('|'))
                header = False
                continue
            line = line.strip()
            line_item = list(line.strip().split('|'))
            new_line_item = []
            for l in line_item:
                ll = l.strip()
                if ll.isnumeric():
                    new_line_item.append(int(ll))
                elif re.fullmatch(r'[0-9]+.[0-9]*', ll) or re.fullmatch(r'[0-9]*.[0-9]+', ll):
                    new_line_item.append(float(ll))
                else:
                    new_line_item.append(ll)
            line_item = tuple(new_line_item)
            rdf = pd.DataFrame.from_records([line_item], columns=header_item)
            ndf = pd.concat([ndf, rdf], ignore_index = True)
            if ndf['Time'].tail(num_gpus).nunique() > 1: sync_add = 1
            else: sync_add = 0

        if env.gut_const.DEBUG: print(ndf)
        # Concatenate new data on plot_data dataframe and truncate
        plot_data.df = pd.concat([plot_data.df, ndf], ignore_index = True)
        plot_data.df = plot_data.df.tail(plot_data.length)
        #########################
        # Call finish_write #####
        pd_sem.release()
        plot_data.finish_write()
        #########################
        #if env.gut_const.DEBUG: print(plot_data.df)
        time.sleep(refreshtime)
        #time.sleep(2)
        #print("read_from_stdin stack size: ", get_stack_size())

    # Quit
    pd_sem.release()
    plot_data.finish_write()
    sys.exit(0)


def refresh(refreshtime, updateData, gc, plot_data):
    while True:
        if plot_data.active_reader():
            print("Refresh skipped due to active reader")
            time.sleep(0.15)
            continue
        elif gc.updating:
            print("Refresh skipped due to active updateData")
            time.sleep(0.15)
            continue
        elif plot_data.quit:
            print("refresh stack size: ", get_stack_size())
            time.sleep(refreshtime)
            sys.exit(0)
        else:
            #while Gtk.events_pending(): Gtk.main_iteration()
            GLib.idle_add(updateData, gc, plot_data)
            while Gtk.events_pending(): Gtk.main_iteration_do(True)
            time.sleep(float(refreshtime)+0.07)
        #print(datetime.utcnow().strftime('%m%d_%H%M%S'), ": refresh stack size: ", get_stack_size())


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("--about", help="README", action="store_true", default=False)
    parser.add_argument("--sleep", help="Number of seconds to sleep between updates", type=int, default=2)
    parser.add_argument("-d", "--debug", help="Debug output", action="store_true", default=False)
    args = parser.parse_args()


    # About me
    if args.about == True :  
        print(__doc__ )
        print("Author: ", __author__ )
        print("Copyright: ", __copyright__)
        print("Credits: ", __credits__)
        print("License: ", __license__)
        print("Version: ", __version__)
        print("Maintainer: ", __maintainer__)
        print("Status: ", __status__)
        sys.exit(0)

    env.gut_const.PATH = os.path.dirname(str(Path(__file__).resolve()))
    env.gut_const.DEBUG = args.debug

    if env.gut_const.check_env() < 0:
        print("Error in environment. Exiting...")
        sys.exit(-1)


    #plot_data.df = pd.read_csv(args.logfile, delimiter='|')

    # Define graph gui and data components
    plot_data = PlotData()

    readthread = threading.Thread(target=read_from_stdin, daemon=True, args=[args.sleep, plot_data]).start()
    while len(plot_data.df.index) < 9:
        print("%s waiting for initial data" % __program_name__)
        time.sleep(args.sleep/4.0)
    plot_data.num_gpus = plot_data.df['Card#'].nunique()
    plot_data.gpu_list = plot_data.df['Card#'].unique()

    gc = GuiComponents(plot_data)
    # Display Gtk style Monitor
    gplot = GPUPlotWindow(gc, plot_data)
    #print(gc.gui_components)
    gplot.connect("delete-event", Gtk.main_quit)
    gplot.show_all()
    # Start refresh thread
    monthread = threading.Thread(target=refresh, daemon=True, args=[args.sleep, updateData, gc, plot_data]).start()

    Gtk.main()
    plot_data.kill_thread()

if __name__ == "__main__":
    main()
