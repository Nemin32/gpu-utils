#!/usr/bin/env python3
"""amdgpu-plot  -  Plot GPU parameter curves

    A utility to plot GPU curves

    Copyright (C) 2019  RueiKe

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.
"""
__author__ = "RueiKe"
__copyright__ = "Copyright (C) 2019 RueiKe"
__credits__ = []
__license__ = "GNU General Public License"
__program_name__ = "amdgpu-plot"
__version__ = "v2.4.1"
__maintainer__ = "RueiKe"
__status__ = "Development"

from matplotlib.ticker import AutoLocator
from matplotlib.backends.backend_gtk3cairo import FigureCanvasGTK3Cairo as FigureCanvas
from matplotlib.figure import Figure
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import gi
gi.require_version("Gtk", "3.0")
from gi.repository import GLib, Gtk, Gdk
import argparse
import re
import subprocess
import threading
import os
import platform
import sys
import csv
import time
from GPUmodules import env
from datetime import datetime
import glob 
import shutil 
from pathlib import Path


def hex_to_rgba(value):
    value = value.lstrip('#')
    if len(value) == 3:
        value = ''.join([v*2 for v in list(value)])
    (r1,g1,b1,a1)=tuple(int(value[i:i+2], 16) for i in range(0, 6, 2))+(1,) 
    (r1,g1,b1,a1)=(r1/255.00000,g1/255.00000,b1/255.00000,a1)

    return (r1,g1,b1,a1)

class PlotData:
    def __init__(self):
        self.df = pd.DataFrame()
        self.writer = False
        self.reader = False

    def get_plot_data(self):
        self.reader = True
        while(self.writer):
            time.sleep(0.5)
        ndf = self.df.copy()
        self.reader = False
        return(ndf)

    def wait_to_write(self):
        self.writer = True
        while(self.reader):
            time.sleep(0.5)
        return(True)

    def finish_write(self):
        self.writer = False

class GuiComponents:
    def __init__(self, gpu_list):
        self.gpu_list = gpu_list
        self.num_gpus = len(gpu_list)
        self.gui_components = {}
        self.gpu_color = {}
        self.colors = {'plotface':'#404040', 'figface':'#909090', 'sclk_f':'#BED661', 'mclk_f':'#89E894',
                'loading':'#1E90FF', 'power':'#E12B06', 'power_cap':'#800000', 'vddgfx':'#778899', 'temp':'#E0E0E0'}
        self.font_colors = {'plotface':'#000000', 'figface':'#000000', 'sclk_f':'#000000', 'mclk_f':'#000000',
                'loading':'#FFFFFF', 'power':'#FFFFFF', 'power_cap':'#FFFFFF', 'vddgfx':'#000000', 'temp':'#000000'}
        #gpu_color_list = ['#DD1E2F', '#EBB035', '#06A2CB', '#218559', '#D0C6B1', '#E18A07', '#336688', '#7C821E']
        gpu_color_list = ['#B52735', '#EBB035', '#06A2CB', '#218559', '#D0C6B1', '#E18A07', '#336688', '#7C821E']
        plot_item_list = ['loading', 'power', 'power_cap', 'temp', 'vddgfx', 'sclk_f', 'mclk_f']

        #header:  ['Time', 'Card#', 'model_display', 'loading', 'power', 'power_cap', 'energy', 'temp', 'vddgfx',
        #'fan_pwm', 'sclk_f', 'sclk_ps', 'mclk_f', 'mclk_ps', 'ppm']

        self.gui_components["energy_bar"] = {}
        self.gui_components["legend"] = {}
        self.gui_components["legend"]["buttons"] = {}
        self.gui_components["legend"]["plot_items"] = {}
        for plotitem in plot_item_list:
            self.gui_components["legend"]["plot_items"][plotitem] = True
        self.gui_components["sclk_pstate_status"] = {}
        self.gui_components["sclk_pstate_status"]["df_name"] = 'sclk_ps'
        self.gui_components["mclk_pstate_status"] = {}
        self.gui_components["mclk_pstate_status"]["df_name"] = 'mclk_ps'
        self.gui_components["temp_status"] = {}
        self.gui_components["temp_status"]["df_name"] = 'temp'
        self.gui_components["card_plots"] = {}
        i=0
        for gpu in gpu_list:
            self.gui_components["card_plots"][gpu] = {}
            self.gui_components["card_plots"][gpu]['color'] = gpu_color_list[i]
            self.gpu_color[gpu] = gpu_color_list[i]
            i += 1
        return


class GPUPlotWindow(Gtk.Window):
    def __init__(self, gc, num_gpus, plot_data):
        box_sapcing_val = 5

        Gtk.Window.__init__(self, title="amdgpu-plot")
        self.set_border_width(1)
        icon_file = os.path.join(env.gut_const.PATH, "icons", "amdgpu-monitor.icon.png")
        if(os.path.isfile(icon_file) == True):
            self.set_icon_from_file(icon_file)
        #self.set_default_size(1000, 100*num_gpus)
        grid = Gtk.Grid()
        grid.override_background_color(Gtk.StateType.NORMAL, Gdk.RGBA(0.7,0.7,0.7,1))
        self.add(grid)

        row = 0
        # Top Bar - Energy
        gc.gui_components["energy_bar"]["gtk_obj"] = Gtk.Label()
        gc.gui_components["energy_bar"]["gtk_obj"].set_markup("<big><b>" + "amdgpu-util Plot" + "</b>" + "</big>")
        gc.gui_components["energy_bar"]["gtk_obj"].override_color(Gtk.StateFlags.NORMAL, Gdk.RGBA(1.0, 1.0, 1.0, 1.0))
        gc.gui_components["energy_bar"]["gtk_obj"].set_property("margin-top", 1)
        gc.gui_components["energy_bar"]["gtk_obj"].set_property("margin-bottom", 1)
        gc.gui_components["energy_bar"]["gtk_obj"].set_property("margin-right", 4)
        gc.gui_components["energy_bar"]["gtk_obj"].set_property("margin-left", 4)
        gc.gui_components["energy_bar"]["gtk_obj"].set_alignment(0.5, 0.5)
        lbox = Gtk.Box(spacing=box_sapcing_val)
        lbox.override_background_color(Gtk.StateType.NORMAL, Gdk.RGBA(.20,.40,.60,1.0))
        lbox.set_property("margin-top", 1)
        lbox.set_property("margin-bottom", 1)
        lbox.set_property("margin-right", 1)
        lbox.set_property("margin-left", 1)
        lbox.pack_start(gc.gui_components["energy_bar"]["gtk_obj"], True, True, 0)
        grid.attach(lbox, 1, row, 4, 1)
        row += 1

        # Legend
        gc.gui_components["legend"]["gtk_obj"] = Gtk.Label()
        gc.gui_components["legend"]["gtk_obj"].set_markup("<big><b>" + "Plot Items" + "</b>" + "</big>")
        gc.gui_components["legend"]["gtk_obj"].override_color(Gtk.StateFlags.NORMAL, Gdk.RGBA(1.0, 1.0, 1.0, 1.0))
        gc.gui_components["legend"]["gtk_obj"].set_property("margin-top", 1)
        gc.gui_components["legend"]["gtk_obj"].set_property("margin-bottom", 1)
        gc.gui_components["legend"]["gtk_obj"].set_property("margin-right", 4)
        gc.gui_components["legend"]["gtk_obj"].set_property("margin-left", 4)
        gc.gui_components["legend"]["gtk_obj"].set_alignment(0.5, 0.5)
        lbox = Gtk.Box(spacing=box_sapcing_val)
        lbox.override_background_color(Gtk.StateType.NORMAL, Gdk.RGBA(.40,.40,.40,1.0))
        lbox.set_property("margin-top", 1)
        lbox.set_property("margin-bottom", 1)
        lbox.set_property("margin-right", 1)
        lbox.set_property("margin-left", 1)
        lbox.pack_start(gc.gui_components["legend"]["gtk_obj"], True, True, 0)
        for k,v in gc.gui_components["legend"]["plot_items"].items():
            but_color = hex_to_rgba(gc.colors[k])
            but_font_color = hex_to_rgba(gc.font_colors[k])
            gc.gui_components["legend"]["buttons"][k] = Gtk.Button("")
            for child in gc.gui_components["legend"]["buttons"][k].get_children():
                child.set_label("<big><b>" + k + "</b></big>")
                child.set_use_markup(True)
                child.override_background_color(Gtk.StateFlags.NORMAL,
                    Gdk.RGBA(but_color[0], but_color[1], but_color[2], but_color[3]))
                gc.gui_components["legend"]["buttons"][k].override_color(Gtk.StateFlags.NORMAL,
                    Gdk.RGBA(but_font_color[0], but_font_color[1], but_font_color[2], but_font_color[3]))
                gc.gui_components["legend"]["buttons"][k].override_background_color(Gtk.StateFlags.NORMAL,
                    Gdk.RGBA(but_color[0], but_color[1], but_color[2], but_color[3]))
            gc.gui_components["legend"]["buttons"][k].connect("clicked", self.toggle_plot_item, gc, k)
            gc.gui_components["legend"]["buttons"][k].set_property("width-request", 90)
            gc.gui_components["legend"]["buttons"][k].set_property("margin-top", 1)
            gc.gui_components["legend"]["buttons"][k].set_property("margin-bottom", 1)
            gc.gui_components["legend"]["buttons"][k].set_property("margin-right", 1)
            gc.gui_components["legend"]["buttons"][k].set_property("margin-left", 1)
            lbox.pack_start(gc.gui_components["legend"]["buttons"][k], True, True, 0)
        grid.attach(lbox, 1, row, 4, 1)
        row += 1

        plot_top_row = row
        for v in [gc.gui_components["sclk_pstate_status"], gc.gui_components["mclk_pstate_status"], gc.gui_components["temp_status"]]:

            # Add Bar Plots Titles
            v["title_obj"] = Gtk.Label()
            v["title_obj"].set_markup("<big><b>Card " + v["df_name"] + "</b>" + "</big>")
            v["title_obj"].override_color(Gtk.StateFlags.NORMAL, Gdk.RGBA(1.0, 1.0, 1.0, 1.0))
            v["title_obj"].set_property("margin-top", 1)
            v["title_obj"].set_property("margin-bottom", 1)
            v["title_obj"].set_property("margin-right", 4)
            v["title_obj"].set_property("margin-left", 4)
            v["title_obj"].set_alignment(0.5, 0.5)
            lbox = Gtk.Box(spacing=box_sapcing_val)
            lbox.override_background_color(Gtk.StateType.NORMAL, Gdk.RGBA(.20,.40,.60,1.0))
            lbox.set_property("margin-top", 1)
            lbox.set_property("margin-bottom", 1)
            lbox.set_property("margin-right", 1)
            lbox.set_property("margin-left", 1)
            lbox.pack_start(v["title_obj"], True, True, 0)

            grid.attach(lbox, 1, row, 1, 1)
            row += 1

            # Add Bar Plots
            latest = plot_data.df['Time'].iloc[-1]
            last_val_df = plot_data.df[plot_data.df['Time'].isin([latest])].loc[:,['Card#', v['df_name']]]
            data_val = last_val_df[v['df_name']].values
            label_val = last_val_df['Card#'].values

            bar_col = []
            for l in label_val:
                bar_col.append(gc.gpu_color[l])
            
            ind = np.arange(gc.num_gpus)  # the x locations for the groups
            width = 0.55       # the width of the bars

            v["figure"], v["ax1"]  = plt.subplots()
            v["ax1"].set_facecolor(gc.colors["plotface"])
            v["figure"].set_facecolor(gc.colors["figface"])
            if v["df_name"] == "temp":
                plt.yticks(np.arange(0,80,10))
            else:
                plt.yticks(np.arange(0,8,1))
            rects1 = v["ax1"].bar(ind, data_val, width, color=bar_col, tick_label=label_val)

            v["canvas"] = FigureCanvas(v["figure"])  # a Gtk.DrawingArea
            v["canvas"].set_size_request(200, 200)

            lbox = Gtk.Box(spacing=box_sapcing_val)
            lbox.override_background_color(Gtk.StateType.NORMAL, Gdk.RGBA(0.5,0.5,0.5,1.0))
            lbox.set_property("margin-top", 1)
            lbox.set_property("margin-bottom", 1)
            lbox.set_property("margin-right", 1)
            lbox.set_property("margin-left", 1)
            lbox.pack_start(v["canvas"], True, True, 0)

            grid.attach(lbox, 1, row, 1, 1)
            row += 1

        row = plot_top_row
        for k,v in gc.gui_components["card_plots"].items():
            latest = plot_data.df['Time'].iloc[-1]
            last_val_df = plot_data.df[plot_data.df['Time'].isin([latest])].loc[:,['Card#', 'energy', 'model_display']]
            last_card_val_df = last_val_df[last_val_df["Card#"].isin([k])]
            last_model_val_df = last_val_df[last_val_df["model_display"].isin([k])]
            data_val = last_card_val_df['energy'].iloc[0]
            model_val = last_card_val_df['model_display'].iloc[0]
            # Add GPU Plots Titles
            v["title_obj"] = Gtk.Label()
            v["title_obj"].set_markup("<big><b>Card   " + str(k) +"    "+ str(model_val) + "    Energy:  " + str(data_val) + "</b>" + "</big>")
            v["title_obj"].override_color(Gtk.StateFlags.NORMAL, Gdk.RGBA(1.0, 1.0, 1.0, 1.0))
            v["title_obj"].set_property("margin-top", 1)
            v["title_obj"].set_property("margin-bottom", 1)
            v["title_obj"].set_property("margin-right", 4)
            v["title_obj"].set_property("margin-left", 4)
            v["title_obj"].set_alignment(0.5, 0.5)
            lbox = Gtk.Box(spacing=box_sapcing_val)
            rgba_col = hex_to_rgba(v["color"])
            lbox.override_background_color(Gtk.StateType.NORMAL, Gdk.RGBA(rgba_col[0], rgba_col[1], rgba_col[2],rgba_col[3]))
            lbox.set_property("margin-top", 1)
            lbox.set_property("margin-bottom", 1)
            lbox.set_property("margin-right", 1)
            lbox.set_property("margin-left", 1)
            lbox.pack_start(v["title_obj"], True, True, 0)

            grid.attach(lbox, 2, row, 3, 1)
            row += 1

            v["figure"], v["ax1"] = plt.subplots()
            v["ax1"].set_facecolor(gc.colors["plotface"])
            v["figure"].set_facecolor(gc.colors["figface"])
            plt.yticks(np.arange(0,250,20))
            v["ax1"].set_ylabel('Loading/Power/Temp', color='k')
            v["ax1"].tick_params('y', colors='k', labelsize=8)
            v["ax1"].set_xticks([])

            v["ax2"] = v["ax1"].twinx()
            plt.yticks(np.arange(100,2500,100))
            v["ax2"].set_ylabel('MHz', color='k')
            v["ax2"].set_xticks([])
            v["ax2"].tick_params('y', colors='k', labelsize=10)

            #header:  ['Time', 'Card#', 'model_display', 'loading', 'power', 'power_cap', 'energy', 'temp', 'vddgfx',
            #'fan_pwm', 'sclk_f', 'sclk_ps', 'mclk_f', 'mclk_ps', 'ppm']
            v["ax1"].plot(plot_data.df[plot_data.df["Card#"].isin([k])].loc[:,['Time']],
                    plot_data.df[plot_data.df["Card#"].isin([k])].loc[:,['power_cap']],
                    color=gc.colors["power_cap"], linewidth=1, linestyle = '--', label='pow_cap')
            v["ax1"].plot(plot_data.df[plot_data.df["Card#"].isin([k])].loc[:,['Time']],
                    plot_data.df[plot_data.df["Card#"].isin([k])].loc[:,['power']],
                    color=gc.colors["power"], linewidth=1, label='pow')
            v["ax1"].plot(plot_data.df[plot_data.df["Card#"].isin([k])].loc[:,['Time']],
                    plot_data.df[plot_data.df["Card#"].isin([k])].loc[:,['loading']],
                    color=gc.colors["loading"], linewidth=1)
            v["ax1"].plot(plot_data.df[plot_data.df["Card#"].isin([k])].loc[:,['Time']],
                    plot_data.df[plot_data.df["Card#"].isin([k])].loc[:,['temp']],
                    color=gc.colors["temp"], linewidth=1)
            v["ax2"].plot(plot_data.df[plot_data.df["Card#"].isin([k])].loc[:,['Time']],
                    plot_data.df[plot_data.df["Card#"].isin([k])].loc[:,['vddgfx']],
                    color=gc.colors["vddgfx"], linewidth=1)
            v["ax2"].plot(plot_data.df[plot_data.df["Card#"].isin([k])].loc[:,['Time']],
                    plot_data.df[plot_data.df["Card#"].isin([k])].loc[:,['sclk_f']],
                    color=gc.colors["sclk_f"], linewidth=1)
            v["ax2"].plot(plot_data.df[plot_data.df["Card#"].isin([k])].loc[:,['Time']],
                    plot_data.df[plot_data.df["Card#"].isin([k])].loc[:,['mclk_f']],
                    color=gc.colors["mclk_f"], linewidth=1)

            v["canvas"] = FigureCanvas(v["figure"])  # a Gtk.DrawingArea
            v["canvas"].set_size_request(600, 200)

            lbox = Gtk.Box(spacing=box_sapcing_val)
            lbox.override_background_color(Gtk.StateType.NORMAL, Gdk.RGBA(1,1,1,1.0))
            lbox.set_property("margin-top", 1)
            lbox.set_property("margin-bottom", 1)
            lbox.set_property("margin-right", 1)
            lbox.set_property("margin-left", 1)
            lbox.pack_start(v["canvas"], True, True, 0)

            grid.attach(lbox, 2, row, 3, 1)
            row += 1

    def toggle_plot_item(self, parent, gc, k):
        pass

def read_from_stdin(plot_data):
    #this should continuously from from stdin and populate df
    #read with pandas
    header = True
    first = True
    for line in sys.stdin:
        if line == "":
            time.sleep(1)
            continue
        line = line.strip()
        if header:
            header_item = list(line.strip().split('|'))
            header = False
            continue
        line_item = list(line.strip().split('|'))
        new_line_item = []
        for l in line_item:
            ll = l.strip()
            if ll.isnumeric():
                new_line_item.append(int(ll))
            elif re.fullmatch(r'[0-9]+.[0-9]*', ll) or re.fullmatch(r'[0-9]*.[0-9]+', ll):
                new_line_item.append(float(ll))
            else:
                new_line_item.append(ll)
        line_item = tuple(new_line_item)
        ndf = pd.DataFrame()
        ndf = pd.DataFrame.from_records([line_item], columns=header_item)
        plot_data.df = pd.concat([plot_data.df, ndf], ignore_index = True)
        plot_data.df = plot_data.df.tail(500)
        #line = ""


def updateData(gc, plot_data):
    #this should just get the latest from df for plot updates
    # Update Bar Plots
    for v in [gc.gui_components["sclk_pstate_status"], gc.gui_components["mclk_pstate_status"], gc.gui_components["temp_status"]]:
        latest = plot_data.df['Time'].iloc[-1]
        last_val_df = plot_data.df[plot_data.df['Time'].isin([latest])].loc[:,['Card#', v['df_name']]]
        data_val = last_val_df[v['df_name']].values
        label_val = last_val_df['Card#'].values
        bar_col = []
        for l in label_val:
            bar_col.append(gc.gpu_color[l])
        ind = np.arange(gc.num_gpus)  # the x locations for the groups
        width = 0.55       # the width of the bars
        v["ax1"].clear()
        rects1 = v["ax1"].bar(ind, data_val, width, color=bar_col, tick_label=label_val)
        v["canvas"].draw()
        v["canvas"].flush_events()
    # Update GPU Plots
    for k,v in gc.gui_components["card_plots"].items():
        latest = plot_data.df['Time'].iloc[-1]
        last_val_df = plot_data.df[plot_data.df['Time'].isin([latest])].loc[:,['Card#', 'energy', 'model_display']]
        last_card_val_df = last_val_df[last_val_df["Card#"].isin([k])]
        last_model_val_df = last_val_df[last_val_df["model_display"].isin([k])]
        data_val = last_card_val_df['energy'].iloc[0]
        model_val = last_card_val_df['model_display'].iloc[0]
        v["title_obj"].set_markup("<big><b>Card   " + str(k) +"    "+ str(model_val) + "    Energy:  " + str(data_val) + "</b>" + "</big>")
        v["ax1"].plot(plot_data.df[plot_data.df["Card#"].isin([k])].loc[:,['Time']],
                plot_data.df[plot_data.df["Card#"].isin([k])].loc[:,['power_cap']],
                color=gc.colors["power_cap"], linewidth=1, linestyle = '--', label='pow_cap')
        v["ax1"].plot(plot_data.df[plot_data.df["Card#"].isin([k])].loc[:,['Time']],
                plot_data.df[plot_data.df["Card#"].isin([k])].loc[:,['power']],
                color=gc.colors["power"], linewidth=1, label='pow')
        v["ax1"].plot(plot_data.df[plot_data.df["Card#"].isin([k])].loc[:,['Time']],
                plot_data.df[plot_data.df["Card#"].isin([k])].loc[:,['loading']],
                color=gc.colors["loading"], linewidth=1)
        v["ax1"].plot(plot_data.df[plot_data.df["Card#"].isin([k])].loc[:,['Time']],
                plot_data.df[plot_data.df["Card#"].isin([k])].loc[:,['temp']],
                color=gc.colors["temp"], linewidth=1)
        v["ax2"].plot(plot_data.df[plot_data.df["Card#"].isin([k])].loc[:,['Time']],
                plot_data.df[plot_data.df["Card#"].isin([k])].loc[:,['vddgfx']],
                color=gc.colors["vddgfx"], linewidth=1)
        v["ax2"].plot(plot_data.df[plot_data.df["Card#"].isin([k])].loc[:,['Time']],
                plot_data.df[plot_data.df["Card#"].isin([k])].loc[:,['sclk_f']],
                color=gc.colors["sclk_f"], linewidth=1)
        v["ax2"].plot(plot_data.df[plot_data.df["Card#"].isin([k])].loc[:,['Time']],
                plot_data.df[plot_data.df["Card#"].isin([k])].loc[:,['mclk_f']],
                color=gc.colors["mclk_f"], linewidth=1)
        v["canvas"].draw()
        v["canvas"].flush_events()


def refresh(refreshtime, updateData, gc, plot_data):
    while True:
        GLib.idle_add(updateData, gc, plot_data)
        time.sleep(refreshtime)


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("--about", help="README", action="store_true", default=False)
    parser.add_argument("--sleep", help="Number of seconds to sleep between updates", type=int, default=2)
    parser.add_argument("--gpu_list", help="List of GPUs", type=str, default="")
    parser.add_argument("--logfile", help="Specify logfile as source data", type=str, default="")
    parser.add_argument("-d", "--debug", help="Debug output", action="store_true", default=False)
    args = parser.parse_args()


    # About me
    if args.about == True :  
        print(__doc__ )
        print("Author: ", __author__ )
        print("Copyright: ", __copyright__)
        print("Credits: ", __credits__)
        print("License: ", __license__)
        print("Version: ", __version__)
        print("Maintainer: ", __maintainer__)
        print("Status: ", __status__)
        sys.exit(0)

    env.gut_const.PATH = os.path.dirname(str(Path(__file__).resolve()))
    env.gut_const.DEBUG = args.debug

    if env.gut_const.check_env() < 0:
        print("Error in environment. Exiting...")
        sys.exit(-1)

    print("WARNING: This is non-functional code, currently under development")

    plot_data = PlotData()

    if args.logfile != "":
        plot_data.df = pd.read_csv(args.logfile, delimiter='|')
        num_gpus = plot_data.df['Card#'].nunique()
        gpu_list = plot_data.df['Card#'].unique()
        if args.debug: print("gpu_list: ", gpu_list)
        if args.debug: print(plot_data.df.dtypes)
        if args.debug: print(plot_data.df.columns)
        if args.debug: print("num_gpus: ", plot_data.df['Card#'].nunique())
    else:
        if args.gpu_list != "":
            #df = pd.DataFrame()
            gpu_list = list(map(int, args.gpu_list.strip().split(',')))
            #gpu_list = list(args.gpu_list.strip().split(','))
            if len(gpu_list) <1:
                print("Error: Invalid GPU List: %s" % args.gpu_list)
                sys.exit(-1)
            num_gpus = len(gpu_list)

    #passed_data ={}
    #passed_data["df"] = df

    if args.logfile =="":
        # Start thread to update Plot
        readthread = threading.Thread(target=read_from_stdin, daemon=True, args=[plot_data]).start()

    time.sleep(14)

    # Define graph components
    gc = GuiComponents(gpu_list)
    # Display Gtk style Monitor
    gplot = GPUPlotWindow(gc, num_gpus, plot_data)
    #print(gc.gui_components)
    gplot.connect("delete-event", Gtk.main_quit)
    gplot.show_all()
    # Start refresh thread
    monthread = threading.Thread(target=refresh, daemon=True, args=[2, updateData, gc, plot_data]).start()

    Gtk.main()

if __name__ == "__main__":
    main()
